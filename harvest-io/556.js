"use strict";(self.webpackChunkgame=self.webpackChunkgame||[]).push([[556],{9652:(t,e,i)=>{i.d(e,{Z:()=>o});var s=i(3687),n=i(9477);function o(t,e,i){let{color:o=65280,scale:r=1,onInit:a,onUpdate:l}=void 0===i?{}:i;const h=[],c=new n.MeshBasicMaterial({color:null!=o?o:65280,wireframe:!0}),u=new s.AO,d=new s.AO,p=new s.AO,y=new s._f,f=new n.SphereGeometry(1),v=new n.BoxGeometry(1,1,1),m=new n.PlaneGeometry(10,10,10,10);function w(e){let i=new n.Mesh;const{SPHERE:o,BOX:r,PLANE:a,CYLINDER:l,CONVEXPOLYHEDRON:h,TRIMESH:y,HEIGHTFIELD:w}=s.bn.types;switch(e.type){case o:i=new n.Mesh(f,c);break;case r:i=new n.Mesh(v,c);break;case a:i=new n.Mesh(m,c);break;case l:{const t=new n.CylinderGeometry(e.radiusTop,e.radiusBottom,e.height,e.numSegments);i=new n.Mesh(t,c),e.geometryId=t.id;break}case h:{const t=function(t){const e=new n.BufferGeometry,i=[];for(let e=0;e<t.vertices.length;e++){const s=t.vertices[e];i.push(s.x,s.y,s.z)}e.setAttribute("position",new n.Float32BufferAttribute(i,3));const s=[];for(let e=0;e<t.faces.length;e++){const i=t.faces[e],n=i[0];for(let t=1;t<i.length-1;t++){const e=i[t],o=i[t+1];s.push(n,e,o)}}return e.setIndex(s),e.computeBoundingSphere(),e.computeVertexNormals(),e}(e);i=new n.Mesh(t,c),e.geometryId=t.id;break}case y:{const t=function(t){const e=new n.BufferGeometry,i=[],s=u,o=d,r=p;for(let e=0;e<t.indices.length/3;e++)t.getTriangleVertices(e,s,o,r),i.push(s.x,s.y,s.z),i.push(o.x,o.y,o.z),i.push(r.x,r.y,r.z);return e.setAttribute("position",new n.Float32BufferAttribute(i,3)),e.computeBoundingSphere(),e.computeVertexNormals(),e}(e);i=new n.Mesh(t,c),e.geometryId=t.id;break}case w:{const t=function(t){const e=new n.BufferGeometry,i=t.elementSize||1,s=t.data.flatMap(((t,e)=>t.flatMap(((t,s)=>[e*i,s*i,t])))),o=[];for(let e=0;e<t.data.length-1;e++)for(let i=0;i<t.data[e].length-1;i++){const s=t.data[e].length,n=e*s+i;o.push(n+1,n+s,n+s+1),o.push(n+s,n+1,n)}return e.setIndex(o),e.setAttribute("position",new n.Float32BufferAttribute(s,3)),e.computeBoundingSphere(),e.computeVertexNormals(),e}(e);i=new n.Mesh(t,c),e.geometryId=t.id;break}}return t.add(i),i}function g(e,i){let o=h[e],a=!1;return function(t,e){if(!t)return!1;const{geometry:i}=t;return i instanceof n.SphereGeometry&&e.type===s.bn.types.SPHERE||i instanceof n.BoxGeometry&&e.type===s.bn.types.BOX||i instanceof n.PlaneGeometry&&e.type===s.bn.types.PLANE||i.id===e.geometryId&&e.type===s.bn.types.CYLINDER||i.id===e.geometryId&&e.type===s.bn.types.CONVEXPOLYHEDRON||i.id===e.geometryId&&e.type===s.bn.types.TRIMESH||i.id===e.geometryId&&e.type===s.bn.types.HEIGHTFIELD}(o,i)||(o&&t.remove(o),h[e]=o=w(i),a=!0),function(t,e){const{SPHERE:i,BOX:n,PLANE:o,CYLINDER:a,CONVEXPOLYHEDRON:l,TRIMESH:h,HEIGHTFIELD:c}=s.bn.types;switch(e.type){case i:{const{radius:i}=e;t.scale.set(i*r,i*r,i*r);break}case n:t.scale.copy(e.halfExtents),t.scale.multiplyScalar(2*r);break;case o:break;case a:case l:t.scale.set(1*r,1*r,1*r);break;case h:t.scale.copy(e.scale).multiplyScalar(r);break;case c:t.scale.set(1*r,1*r,1*r)}}(o,i),a}return m.translate(0,0,1e-4),{update:function(){const i=h,s=u,n=y;let o=0;for(const t of e.bodies)for(let e=0;e!==t.shapes.length;e++){const r=t.shapes[e],h=g(o,r),c=i[o];c&&(t.quaternion.vmult(t.shapeOffsets[e],s),t.position.vadd(s,s),t.quaternion.mult(t.shapeOrientations[e],n),c.position.copy(s),c.quaternion.copy(n),h&&a instanceof Function&&a(t,c,r),!h&&l instanceof Function&&l(t,c,r)),o++}for(let e=o;e<i.length;e++){const s=i[e];s&&t.remove(s)}i.length=o}}}},3687:(t,e,i)=>{i.d(e,{AO:()=>o,Ab:()=>ue,Fv:()=>tt,YD:()=>x,_B:()=>_,_f:()=>y,aL:()=>ce,bn:()=>m,np:()=>ve,q3:()=>Cs,uT:()=>I,xu:()=>S,zH:()=>ut});class s{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new o);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new o);const i=this.elements,s=t.x,n=t.y,r=t.z;return e.x=i[0]*s+i[1]*n+i[2]*r,e.y=i[3]*s+i[4]*n+i[5]*r,e.z=i[6]*s+i[7]*n+i[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new s);const i=this.elements,n=t.elements,o=e.elements,r=i[0],a=i[1],l=i[2],h=i[3],c=i[4],u=i[5],d=i[6],p=i[7],y=i[8],f=n[0],v=n[1],m=n[2],w=n[3],g=n[4],x=n[5],b=n[6],E=n[7],z=n[8];return o[0]=r*f+a*w+l*b,o[1]=r*v+a*g+l*E,o[2]=r*m+a*x+l*z,o[3]=h*f+c*w+u*b,o[4]=h*v+c*g+u*E,o[5]=h*m+c*x+u*z,o[6]=d*f+p*w+y*b,o[7]=d*v+p*g+y*E,o[8]=d*m+p*x+y*z,e}scale(t,e){void 0===e&&(e=new s);const i=this.elements,n=e.elements;for(let e=0;3!==e;e++)n[3*e+0]=t.x*i[3*e+0],n[3*e+1]=t.y*i[3*e+1],n[3*e+2]=t.z*i[3*e+2];return e}solve(t,e){void 0===e&&(e=new o);const i=[];let s,n;for(s=0;s<12;s++)i.push(0);for(s=0;s<3;s++)for(n=0;n<3;n++)i[s+4*n]=this.elements[s+3*n];i[3]=t.x,i[7]=t.y,i[11]=t.z;let r=3;const a=r;let l;let h;do{if(s=a-r,0===i[s+4*s])for(n=s+1;n<a;n++)if(0!==i[s+4*n]){l=4;do{h=4-l,i[h+4*s]+=i[h+4*n]}while(--l);break}if(0!==i[s+4*s])for(n=s+1;n<a;n++){const t=i[s+4*n]/i[s+4*s];l=4;do{h=4-l,i[h+4*n]=h<=s?0:i[h+4*n]-i[h+4*s]*t}while(--l)}}while(--r);if(e.z=i[11]/i[10],e.y=(i[7]-i[6]*e.z)/i[5],e.x=(i[3]-i[2]*e.z-i[1]*e.y)/i[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,i){if(void 0===i)return this.elements[e+3*t];this.elements[e+3*t]=i}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new s);const e=n;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)e[i+6*o]=this.elements[i+3*o];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let r=3;const a=r;let l;let h;do{if(i=a-r,0===e[i+6*i])for(o=i+1;o<a;o++)if(0!==e[i+6*o]){l=6;do{h=6-l,e[h+6*i]+=e[h+6*o]}while(--l);break}if(0!==e[i+6*i])for(o=i+1;o<a;o++){const t=e[i+6*o]/e[i+6*i];l=6;do{h=6-l,e[h+6*o]=h<=i?0:e[h+6*o]-e[h+6*i]*t}while(--l)}}while(--r);i=2;do{o=i-1;do{const t=e[i+6*o]/e[i+6*i];l=6;do{h=6-l,e[h+6*o]=e[h+6*o]-e[h+6*i]*t}while(--l)}while(o--)}while(--i);i=2;do{const t=1/e[i+6*i];l=6;do{h=6-l,e[h+6*i]=e[h+6*i]*t}while(--l)}while(i--);i=2;do{o=2;do{if(h=e[3+o+6*i],isNaN(h)||h===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,h)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,i=t.y,s=t.z,n=t.w,o=e+e,r=i+i,a=s+s,l=e*o,h=e*r,c=e*a,u=i*r,d=i*a,p=s*a,y=n*o,f=n*r,v=n*a,m=this.elements;return m[0]=1-(u+p),m[1]=h-v,m[2]=c+f,m[3]=h+v,m[4]=1-(l+p),m[5]=d-y,m[6]=c-f,m[7]=d+y,m[8]=1-(l+u),this}transpose(t){void 0===t&&(t=new s);const e=this.elements,i=t.elements;let n;return i[0]=e[0],i[4]=e[4],i[8]=e[8],n=e[1],i[1]=e[3],i[3]=n,n=e[2],i[2]=e[6],i[6]=n,n=e[5],i[5]=e[7],i[7]=n,t}}const n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class o{constructor(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.z=i}cross(t,e){void 0===e&&(e=new o);const i=t.x,s=t.y,n=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*n-l*s,e.y=l*i-r*n,e.z=r*s-a*i,e}set(t,e,i){return this.x=t,this.y=e,this.z=i,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new o(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new o(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new s([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,i=this.z,s=Math.sqrt(t*t+e*e+i*i);if(s>0){const t=1/s;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return s}unit(t){void 0===t&&(t=new o);const e=this.x,i=this.y,s=this.z;let n=Math.sqrt(e*e+i*i+s*s);return n>0?(n=1/n,t.x=e*n,t.y=i*n,t.z=s*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,i=this.z;return Math.sqrt(t*t+e*e+i*i)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s))}distanceSquared(t){const e=this.x,i=this.y,s=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-i)*(o-i)+(r-s)*(r-s)}scale(t,e){void 0===e&&(e=new o);const i=this.x,s=this.y,n=this.z;return e.x=t*i,e.y=t*s,e.z=t*n,e}vmul(t,e){return void 0===e&&(e=new o),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,i){return void 0===i&&(i=new o),i.x=this.x+t*e.x,i.y=this.y+t*e.y,i.z=this.z+t*e.z,i}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new o),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const i=this.length();if(i>0){const s=r,n=1/i;s.set(this.x*n,this.y*n,this.z*n);const o=a;Math.abs(s.x)<.9?(o.set(1,0,0),s.cross(o,t)):(o.set(0,1,0),s.cross(o,t)),s.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,i){const s=this.x,n=this.y,o=this.z;i.x=s+(t.x-s)*e,i.y=n+(t.y-n)*e,i.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(l),l.almostEquals(t,e)}clone(){return new o(this.x,this.y,this.z)}}o.ZERO=new o(0,0,0),o.UNIT_X=new o(1,0,0),o.UNIT_Y=new o(0,1,0),o.UNIT_Z=new o(0,0,1);const r=new o,a=new o,l=new o;class h{constructor(t){void 0===t&&(t={}),this.lowerBound=new o,this.upperBound=new o,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,i,s){const n=this.lowerBound,o=this.upperBound,r=i;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let e=1;e<t.length;e++){let i=t[e];r&&(r.vmult(i,c),i=c),i.x>o.x&&(o.x=i.x),i.x<n.x&&(n.x=i.x),i.y>o.y&&(o.y=i.y),i.y<n.y&&(n.y=i.y),i.z>o.z&&(o.z=i.z),i.z<n.z&&(n.z=i.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),s&&(n.x-=s,n.y-=s,n.z-=s,o.x+=s,o.y+=s,o.z+=s),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new h).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound,o=s.x<=i.x&&i.x<=n.x||e.x<=n.x&&n.x<=i.x,r=s.y<=i.y&&i.y<=n.y||e.y<=n.y&&n.y<=i.y,a=s.z<=i.z&&i.z<=n.z||e.z<=n.z&&n.z<=i.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,n=t.upperBound;return e.x<=s.x&&i.x>=n.x&&e.y<=s.y&&i.y>=n.y&&e.z<=s.z&&i.z>=n.z}getCorners(t,e,i,s,n,o,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),i.set(h.x,h.y,l.z),s.set(l.x,h.y,h.z),n.set(h.x,l.y,h.z),o.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const i=u,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,n,o,r,a,l,h,c);for(let e=0;8!==e;e++){const s=i[e];t.pointToLocal(s,s)}return e.setFromPoints(i)}toWorldFrame(t,e){const i=u,s=i[0],n=i[1],o=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,n,o,r,a,l,h,c);for(let e=0;8!==e;e++){const s=i[e];t.pointToWorld(s,s)}return e.setFromPoints(i)}overlapsRay(t){const{direction:e,from:i}=t,s=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-i.x)*s,a=(this.upperBound.x-i.x)*s,l=(this.lowerBound.y-i.y)*n,h=(this.upperBound.y-i.y)*n,c=(this.lowerBound.z-i.z)*o,u=(this.upperBound.z-i.z)*o,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const c=new o,u=[new o,new o,new o,new o,new o,new o,new o,new o];class d{constructor(){this.matrix=[]}get(t,e){let{index:i}=t,{index:s}=e;if(s>i){const t=s;s=i,i=t}return this.matrix[(i*(i+1)>>1)+s-1]}set(t,e,i){let{index:s}=t,{index:n}=e;if(n>s){const t=n;n=s,s=t}this.matrix[(s*(s+1)>>1)+n-1]=i?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class p{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;return void 0===i[t]&&(i[t]=[]),i[t].includes(e)||i[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return!(void 0===i[t]||!i[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const i=this._listeners;if(void 0===i[t])return this;const s=i[t].indexOf(e);return-1!==s&&i[t].splice(s,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let i=0,s=e.length;i<s;i++)e[i].call(this,t)}return this}}class y{constructor(t,e,i,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=1),this.x=t,this.y=e,this.z=i,this.w=s}set(t,e,i,s){return this.x=t,this.y=e,this.z=i,this.w=s,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const i=Math.sin(.5*e);return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new o),this.normalize();const e=2*Math.acos(this.w),i=Math.sqrt(1-this.w*this.w);return i<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/i,t.y=this.y/i,t.z=this.z/i),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=f,i=v;t.tangents(e,i),this.setFromAxisAngle(e,Math.PI)}else{const i=t.cross(e);this.x=i.x,this.y=i.y,this.z=i.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new y);const i=this.x,s=this.y,n=this.z,o=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=i*h+o*r+s*l-n*a,e.y=s*h+o*a+n*r-i*l,e.z=n*h+o*l+i*a-s*r,e.w=o*h-i*r-s*a-n*l,e}inverse(t){void 0===t&&(t=new y);const e=this.x,i=this.y,s=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+i*i+s*s+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new y),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new o);const i=t.x,s=t.y,n=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*i+a*n-l*s,u=h*s+l*i-r*n,d=h*n+r*s-a*i,p=-r*i-a*s-l*n;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let i,s,n;void 0===e&&(e="YZX");const o=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error(`Euler order ${e} not supported yet.`);{const t=o*r+a*l;if(t>.499&&(i=2*Math.atan2(o,l),s=Math.PI/2,n=0),t<-.499&&(i=-2*Math.atan2(o,l),s=-Math.PI/2,n=0),void 0===i){const e=o*o,h=r*r,c=a*a;i=Math.atan2(2*r*l-2*o*a,1-2*h-2*c),s=Math.asin(2*t),n=Math.atan2(2*o*l-2*r*a,1-2*e-2*c)}}t.y=i,t.z=s,t.x=n}setFromEuler(t,e,i,s){void 0===s&&(s="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(i/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(i/2);return"XYZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"YXZ"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"ZXY"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"ZYX"===s?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"YZX"===s?(this.x=a*o*r+n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r-a*l*h):"XZY"===s&&(this.x=a*o*r-n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r+a*l*h),this}clone(){return new y(this.x,this.y,this.z,this.w)}slerp(t,e,i){void 0===i&&(i=new y);const s=this.x,n=this.y,o=this.z,r=this.w;let a,l,h,c,u,d=t.x,p=t.y,f=t.z,v=t.w;return l=s*d+n*p+o*f+r*v,l<0&&(l=-l,d=-d,p=-p,f=-f,v=-v),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),i.x=c*s+u*d,i.y=c*n+u*p,i.z=c*o+u*f,i.w=c*r+u*v,i}integrate(t,e,i,s){void 0===s&&(s=new y);const n=t.x*i.x,o=t.y*i.y,r=t.z*i.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return s.x+=u*(n*c+o*h-r*l),s.y+=u*(o*c+r*a-n*h),s.z+=u*(r*c+n*l-o*a),s.w+=u*(-n*a-o*l-r*h),s}}const f=new o,v=new o;class m{constructor(t){void 0===t&&(t={}),this.id=m.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,i,s){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}m.idCounter=0,m.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class w{constructor(t){void 0===t&&(t={}),this.position=new o,this.quaternion=new y,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return w.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return w.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,i,s){return void 0===s&&(s=new o),i.vsub(t,s),e.conjugate(g),g.vmult(s,s),s}static pointToWorldFrame(t,e,i,s){return void 0===s&&(s=new o),e.vmult(i,s),s.vadd(t,s),s}static vectorToWorldFrame(t,e,i){return void 0===i&&(i=new o),t.vmult(e,i),i}static vectorToLocalFrame(t,e,i,s){return void 0===s&&(s=new o),e.w*=-1,e.vmult(i,s),e.w*=-1,s}}const g=new y;class x extends m{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:i=[],normals:s=[],axes:n,boundingSphereRadius:o}=t;super({type:m.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=i,this.faceNormals=s,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,i=this.uniqueEdges;i.length=0;const s=new o;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let t=0;t!==r;t++){const n=(t+1)%r;e[o[t]].vsub(e[o[n]],s),s.normalize();let a=!1;for(let t=0;t!==i.length;t++)if(i[t].almostEquals(s)||i[t].almostEquals(s)){a=!0;break}a||i.push(s.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let e=0;e<this.faces[t].length;e++)if(!this.vertices[this.faces[t][e]])throw new Error(`Vertex ${this.faces[t][e]} not found!`);const e=this.faceNormals[t]||new o;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const i=this.vertices[this.faces[t][0]];if(e.dot(i)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const i=this.faces[t],s=this.vertices[i[0]],n=this.vertices[i[1]],o=this.vertices[i[2]];x.computeNormal(s,n,o,e)}static computeNormal(t,e,i,s){const n=new o,r=new o;e.vsub(t,r),i.vsub(e,n),n.cross(r,s),s.isZero()||s.normalize()}clipAgainstHull(t,e,i,s,n,r,a,l,h){const c=new o;let u=-1,d=-Number.MAX_VALUE;for(let t=0;t<i.faces.length;t++){c.copy(i.faceNormals[t]),n.vmult(c,c);const e=c.dot(r);e>d&&(d=e,u=t)}const p=[];for(let t=0;t<i.faces[u].length;t++){const e=i.vertices[i.faces[u][t]],r=new o;r.copy(e),n.vmult(r,r),s.vadd(r,r),p.push(r)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,i,s,n,r,a,l){const h=new o,c=new o,u=new o,d=new o,p=new o,y=new o;let f=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let o=0;o!==v.uniqueAxes.length;o++){i.vmult(v.uniqueAxes[o],h);const a=v.testSepAxis(h,t,e,i,s,n);if(!1===a)return!1;a<f&&(f=a,r.copy(h))}else{const o=a?a.length:v.faces.length;for(let l=0;l<o;l++){const o=a?a[l]:l;h.copy(v.faceNormals[o]),i.vmult(h,h);const c=v.testSepAxis(h,t,e,i,s,n);if(!1===c)return!1;c<f&&(f=c,r.copy(h))}}if(t.uniqueAxes)for(let o=0;o!==t.uniqueAxes.length;o++){n.vmult(t.uniqueAxes[o],c);const a=v.testSepAxis(c,t,e,i,s,n);if(!1===a)return!1;a<f&&(f=a,r.copy(c))}else{const o=l?l.length:t.faces.length;for(let a=0;a<o;a++){const o=l?l[a]:a;c.copy(t.faceNormals[o]),n.vmult(c,c);const h=v.testSepAxis(c,t,e,i,s,n);if(!1===h)return!1;h<f&&(f=h,r.copy(c))}}for(let o=0;o!==v.uniqueEdges.length;o++){i.vmult(v.uniqueEdges[o],d);for(let o=0;o!==t.uniqueEdges.length;o++)if(n.vmult(t.uniqueEdges[o],p),d.cross(p,y),!y.almostZero()){y.normalize();const o=v.testSepAxis(y,t,e,i,s,n);if(!1===o)return!1;o<f&&(f=o,r.copy(y))}}return s.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,i,s,n,o){x.project(this,t,i,s,b),x.project(e,t,n,o,E);const r=b[0],a=b[1],l=E[0],h=E[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const i=new o,s=new o;this.computeLocalAABB(s,i);const n=i.x-s.x,r=i.y-s.y,a=i.z-s.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],i=this.faceNormals[t],s=this.vertices[e[0]];return-i.dot(s)}clipFaceAgainstHull(t,e,i,s,n,r,a){const l=new o,h=new o,c=new o,u=new o,d=new o,p=new o,y=new o,f=new o,v=this,m=s,w=[];let g=-1,x=Number.MAX_VALUE;for(let e=0;e<v.faces.length;e++){l.copy(v.faceNormals[e]),i.vmult(l,l);const s=l.dot(t);s<x&&(x=s,g=e)}if(g<0)return;const b=v.faces[g];b.connectedFaces=[];for(let t=0;t<v.faces.length;t++)for(let e=0;e<v.faces[t].length;e++)-1!==b.indexOf(v.faces[t][e])&&t!==g&&-1===b.connectedFaces.indexOf(t)&&b.connectedFaces.push(t);const E=b.length;for(let t=0;t<E;t++){const s=v.vertices[b[t]],n=v.vertices[b[(t+1)%E]];s.vsub(n,h),c.copy(h),i.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),i.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(s),i.vmult(p,p),e.vadd(p,p);const o=b.connectedFaces[t];y.copy(this.faceNormals[o]);const r=this.getPlaneConstantOfFace(o);f.copy(y),i.vmult(f,f);const a=r-f.dot(e);for(this.clipFaceAgainstPlane(m,w,f,a);m.length;)m.shift();for(;w.length;)m.push(w.shift())}y.copy(this.faceNormals[g]);const z=this.getPlaneConstantOfFace(g);f.copy(y),i.vmult(f,f);const B=z-f.dot(e);for(let t=0;t<m.length;t++){let e=f.dot(m[t])+B;if(e<=n&&(console.log(`clamped: depth=${e} to minDist=${n}`),e=n),e<=r){const i=m[t];if(e<=1e-6){const t={point:i,normal:f,depth:e};a.push(t)}}}}clipFaceAgainstPlane(t,e,i,s){let n,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];n=i.dot(l)+s;for(let c=0;c<a;c++){if(h=t[c],r=i.dot(h)+s,n<0)if(r<0){const t=new o;t.copy(h),e.push(t)}else{const t=new o;l.lerp(h,n/(n-r),t),e.push(t)}else if(r<0){const t=new o;l.lerp(h,n/(n-r),t),e.push(t),e.push(h)}l=h,n=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new o);const i=this.vertices,s=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(i[n],s[n]),t.vadd(s[n],s[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const i=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let s=0;s<this.vertices.length;s++){const n=i[s];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new o);const i=this.faceNormals,s=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(i[n],s[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let i=0;i!==e.length;i++){const s=e[i].lengthSquared();s>t&&(t=s)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,i,s){const n=this.vertices;let r,a,l,h,c,u,d=new o;for(let i=0;i<n.length;i++){d.copy(n[i]),e.vmult(d,d),t.vadd(d,d);const s=d;(void 0===r||s.x<r)&&(r=s.x),(void 0===h||s.x>h)&&(h=s.x),(void 0===a||s.y<a)&&(a=s.y),(void 0===c||s.y>c)&&(c=s.y),(void 0===l||s.z<l)&&(l=s.z),(void 0===u||s.z>u)&&(u=s.z)}i.set(r,a,l),s.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new o);const e=this.vertices;for(let i=0;i<e.length;i++)t.vadd(e[i],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const i=this.vertices.length,s=this.vertices;if(e){for(let t=0;t<i;t++){const i=s[t];e.vmult(i,i)}for(let t=0;t<this.faceNormals.length;t++){const i=this.faceNormals[t];e.vmult(i,i)}}if(t)for(let e=0;e<i;e++){const i=s[e];i.vadd(t,i)}}pointIsInside(t){const e=this.vertices,i=this.faces,s=this.faceNormals,n=new o;this.getAveragePointLocal(n);for(let r=0;r<this.faces.length;r++){let a=s[r];const l=e[i[r][0]],h=new o;t.vsub(l,h);const c=a.dot(h),u=new o;n.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,i,s,n){const o=t.vertices.length,r=z;let a=0,l=0;const h=B,c=t.vertices;h.setZero(),w.vectorToLocalFrame(i,s,e,r),w.pointToLocalFrame(i,s,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let t=1;t<o;t++){const e=c[t].dot(r);e>a&&(a=e),e<l&&(l=e)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}n[0]=a,n[1]=l}}const b=[],E=[],z=(new o,new o),B=new o;class S extends m{constructor(t){super({type:m.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,i=this.halfExtents.z,s=o,n=[new s(-t,-e,-i),new s(t,-e,-i),new s(t,e,-i),new s(-t,e,-i),new s(-t,-e,i),new s(t,-e,i),new s(t,e,i),new s(-t,e,i)],r=[new s(0,0,1),new s(0,1,0),new s(1,0,0)],a=new x({vertices:n,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new o),S.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,i){const s=t;i.x=1/12*e*(2*s.y*2*s.y+2*s.z*2*s.z),i.y=1/12*e*(2*s.x*2*s.x+2*s.z*2*s.z),i.z=1/12*e*(2*s.y*2*s.y+2*s.x*2*s.x)}getSideNormals(t,e){const i=t,s=this.halfExtents;if(i[0].set(s.x,0,0),i[1].set(0,s.y,0),i[2].set(0,0,s.z),i[3].set(-s.x,0,0),i[4].set(0,-s.y,0),i[5].set(0,0,-s.z),void 0!==e)for(let t=0;t!==i.length;t++)e.vmult(i[t],i[t]);return i}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,i){const s=this.halfExtents,n=[[s.x,s.y,s.z],[-s.x,s.y,s.z],[-s.x,-s.y,s.z],[-s.x,-s.y,-s.z],[s.x,-s.y,-s.z],[s.x,s.y,-s.z],[-s.x,s.y,-s.z],[s.x,-s.y,s.z]];for(let s=0;s<n.length;s++)A.set(n[s][0],n[s][1],n[s][2]),e.vmult(A,A),t.vadd(A,A),i(A.x,A.y,A.z)}calculateWorldAABB(t,e,i,s){const n=this.halfExtents;M[0].set(n.x,n.y,n.z),M[1].set(-n.x,n.y,n.z),M[2].set(-n.x,-n.y,n.z),M[3].set(-n.x,-n.y,-n.z),M[4].set(n.x,-n.y,-n.z),M[5].set(n.x,n.y,-n.z),M[6].set(-n.x,n.y,-n.z),M[7].set(n.x,-n.y,n.z);const o=M[0];e.vmult(o,o),t.vadd(o,o),s.copy(o),i.copy(o);for(let n=1;n<8;n++){const o=M[n];e.vmult(o,o),t.vadd(o,o);const r=o.x,a=o.y,l=o.z;r>s.x&&(s.x=r),a>s.y&&(s.y=a),l>s.z&&(s.z=l),r<i.x&&(i.x=r),a<i.y&&(i.y=a),l<i.z&&(i.z=l)}}}const A=new o,M=[new o,new o,new o,new o,new o,new o,new o,new o],F=1,C=2,T=4,R=0,N=1,P=2;class I extends p{constructor(t){void 0===t&&(t={}),super(),this.id=I.idCounter++,this.index=-1,this.world=null,this.vlambda=new o,this.collisionFilterGroup="number"==typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof t.collisionResponse||t.collisionResponse,this.position=new o,this.previousPosition=new o,this.interpolatedPosition=new o,this.initPosition=new o,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new o,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new o,this.force=new o;const e="number"==typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"==typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?I.STATIC:I.DYNAMIC,typeof t.type==typeof I.STATIC&&(this.type=t.type),this.allowSleep=void 0===t.allowSleep||t.allowSleep,this.sleepState=I.AWAKE,this.sleepSpeedLimit=void 0!==t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new o,this.quaternion=new y,this.initQuaternion=new y,this.previousQuaternion=new y,this.interpolatedQuaternion=new y,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new o,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new o,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new o,this.invInertia=new o,this.invInertiaWorld=new s,this.invMassSolve=0,this.invInertiaSolve=new o,this.invInertiaWorldSolve=new s,this.fixedRotation=void 0!==t.fixedRotation&&t.fixedRotation,this.angularDamping=void 0!==t.angularDamping?t.angularDamping:.01,this.linearFactor=new o(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new o(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new h,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new o,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=I.AWAKE,this.wakeUpAfterNarrowphase=!1,t===I.SLEEPING&&this.dispatchEvent(I.wakeupEvent)}sleep(){this.sleepState=I.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,i=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),s=this.sleepSpeedLimit**2;e===I.AWAKE&&i<s?(this.sleepState=I.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(I.sleepyEvent)):e===I.SLEEPY&&i>s?this.wakeUp():e===I.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(I.sleepEvent))}}updateSolveMassProperties(){this.sleepState===I.SLEEPING||this.type===I.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new o),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new o),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new o),this.quaternion.vmult(t,e),e}addShape(t,e,i){const s=new o,n=new y;return e&&s.copy(e),i&&n.copy(i),this.shapes.push(t),this.shapeOffsets.push(s),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,i=t.length;let s=0;for(let n=0;n!==i;n++){const i=t[n];i.updateBoundingSphereRadius();const o=e[n].length(),r=i.boundingSphereRadius;o+r>s&&(s=o+r)}this.boundingRadius=s}updateAABB(){const t=this.shapes,e=this.shapeOffsets,i=this.shapeOrientations,s=t.length,n=q,o=L,r=this.quaternion,a=this.aabb,l=j;for(let h=0;h!==s;h++){const s=t[h];r.vmult(e[h],n),n.vadd(this.position,n),r.mult(i[h],o),s.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=O,i=V;t.setRotationFromQuaternion(this.quaternion),t.transpose(i),t.scale(e,t),t.mmult(i,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new o),this.type!==I.DYNAMIC)return;this.sleepState===I.SLEEPING&&this.wakeUp();const i=k;e.cross(t,i),this.force.vadd(t,this.force),this.torque.vadd(i,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new o),this.type!==I.DYNAMIC)return;const i=H,s=W;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyForce(i,s)}applyTorque(t){this.type===I.DYNAMIC&&(this.sleepState===I.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new o),this.type!==I.DYNAMIC)return;this.sleepState===I.SLEEPING&&this.wakeUp();const i=e,s=G;s.copy(t),s.scale(this.invMass,s),this.velocity.vadd(s,this.velocity);const n=D;i.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new o),this.type!==I.DYNAMIC)return;const i=Y,s=U;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyImpulse(i,s)}updateMassProperties(){const t=X;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,i=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),S.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!i?1/e.x:0,e.y>0&&!i?1/e.y:0,e.z>0&&!i?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const i=new o;return t.vsub(this.position,i),this.angularVelocity.cross(i,e),this.velocity.vadd(e,e),e}integrate(t,e,i){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==I.DYNAMIC&&this.type!==I.KINEMATIC||this.sleepState===I.SLEEPING)return;const s=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;s.x+=r.x*d*u.x,s.y+=r.y*d*u.y,s.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,f=a.x*y.x,v=a.y*y.y,m=a.z*y.z;n.x+=t*(p[0]*f+p[1]*v+p[2]*m),n.y+=t*(p[3]*f+p[4]*v+p[5]*m),n.z+=t*(p[6]*f+p[7]*v+p[8]*m),o.x+=s.x*t,o.y+=s.y*t,o.z+=s.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(i?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}I.idCounter=0,I.COLLIDE_EVENT_NAME="collide",I.DYNAMIC=F,I.STATIC=C,I.KINEMATIC=T,I.AWAKE=R,I.SLEEPY=N,I.SLEEPING=P,I.wakeupEvent={type:"wakeup"},I.sleepyEvent={type:"sleepy"},I.sleepEvent={type:"sleep"};const q=new o,L=new y,j=new h,O=new s,V=new s,k=(new s,new o),H=new o,W=new o,G=new o,D=new o,Y=new o,U=new o,X=new o;class _{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,i){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!=(t.collisionFilterGroup&e.collisionFilterMask)&&0!=(e.collisionFilterGroup&t.collisionFilterMask)&&(0==(t.type&I.STATIC)&&t.sleepState!==I.SLEEPING||0==(e.type&I.STATIC)&&e.sleepState!==I.SLEEPING)}intersectionTest(t,e,i,s){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,i,s):this.doBoundingSphereBroadphase(t,e,i,s)}doBoundingSphereBroadphase(t,e,i,s){const n=Z;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2;n.lengthSquared()<o&&(i.push(t),s.push(e))}doBoundingBoxBroadphase(t,e,i,s){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(i.push(t),s.push(e))}makePairsUnique(t,e){const i=$,s=K,n=Q,o=t.length;for(let i=0;i!==o;i++)s[i]=t[i],n[i]=e[i];t.length=0,e.length=0;for(let t=0;t!==o;t++){const e=s[t].id,o=n[t].id,r=e<o?`${e},${o}`:`${o},${e}`;i[r]=t,i.keys.push(r)}for(let o=0;o!==i.keys.length;o++){const o=i.keys.pop(),r=i[o];t.push(s[r]),e.push(n[r]),delete i[o]}}setWorld(t){}static boundingSphereCheck(t,e){const i=new o;t.position.vsub(e.position,i);const s=t.shapes[0],n=e.shapes[0];return Math.pow(s.boundingSphereRadius+n.boundingSphereRadius,2)>i.lengthSquared()}aabbQuery(t,e,i){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Z=new o;new o,new y,new o;const $={keys:[]},K=[],Q=[];new o;new o;new o;class J extends _{constructor(){super()}collisionPairs(t,e,i){const s=t.bodies,n=s.length;let o,r;for(let t=0;t!==n;t++)for(let n=0;n!==t;n++)o=s[t],r=s[n],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,i)}aabbQuery(t,e,i){void 0===i&&(i=[]);for(let s=0;s<t.bodies.length;s++){const n=t.bodies[s];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&i.push(n)}return i}}class tt{constructor(){this.rayFromWorld=new o,this.rayToWorld=new o,this.hitNormalWorld=new o,this.hitPointWorld=new o,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,i,s,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(i),this.hitPointWorld.copy(s),this.shape=n,this.body=o,this.distance=r}}let et,it,st,nt,ot,rt,at;const lt=1,ht=2,ct=4;et=m.types.SPHERE,it=m.types.PLANE,st=m.types.BOX,nt=m.types.CYLINDER,ot=m.types.CONVEXPOLYHEDRON,rt=m.types.HEIGHTFIELD,at=m.types.TRIMESH;class ut{get[et](){return this._intersectSphere}get[it](){return this._intersectPlane}get[st](){return this._intersectBox}get[nt](){return this._intersectConvex}get[ot](){return this._intersectConvex}get[rt](){return this._intersectHeightfield}get[at](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new o),void 0===e&&(e=new o),this.from=t.clone(),this.to=e.clone(),this.direction=new o,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=ut.ANY,this.result=new tt,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||ut.ANY,this.result=e.result||new tt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(dt),pt.length=0,t.broadphase.aabbQuery(t,dt,pt),this.intersectBodies(pt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const i=this.checkCollisionResponse;if(i&&!t.collisionResponse)return;if(0==(this.collisionFilterGroup&t.collisionFilterMask)||0==(t.collisionFilterGroup&this.collisionFilterMask))return;const s=vt,n=mt;for(let e=0,o=t.shapes.length;e<o;e++){const o=t.shapes[e];if((!i||o.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[e],n),t.quaternion.vmult(t.shapeOffsets[e],s),s.vadd(t.position,s),this.intersectShape(o,n,s,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let e=0,i=t.length;!this.result.shouldStop&&e<i;e++)this.intersectBody(t[e])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,i,s){const n=function(t,e,i){i.vsub(t,Ot);const s=Ot.dot(e);e.scale(s,Vt),Vt.vadd(t,Vt);const n=i.distanceTo(Vt);return n}(this.from,this.direction,i);if(n>t.boundingSphereRadius)return;const o=this[t.type];o&&o.call(this,t,e,i,s,t)}_intersectBox(t,e,i,s,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,i,s,n)}_intersectPlane(t,e,i,s,n){const r=this.from,a=this.to,l=this.direction,h=new o(0,0,1);e.vmult(h,h);const c=new o;r.vsub(i,c);const u=c.dot(h);a.vsub(i,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new o,y=new o,f=new o;r.vsub(i,p);const v=-h.dot(p)/d;l.scale(v,y),r.vadd(y,f),this.reportIntersection(h,f,n,s,-1)}getAABB(t){const{lowerBound:e,upperBound:i}=t,s=this.to,n=this.from;e.x=Math.min(s.x,n.x),e.y=Math.min(s.y,n.y),e.z=Math.min(s.z,n.z),i.x=Math.max(s.x,n.x),i.y=Math.max(s.y,n.y),i.z=Math.max(s.z,n.z)}_intersectHeightfield(t,e,i,s,n){t.data,t.elementSize;const o=Bt;o.from.copy(this.from),o.to.copy(this.to),w.pointToLocalFrame(i,e,o.from,o.from),w.pointToLocalFrame(i,e,o.to,o.to),o.updateDirection();const r=St;let a,l,c,u;a=l=0,c=u=t.data.length-1;const d=new h;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let r=a;r<c;r++)for(let a=l;a<u;a++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(r,a,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(r,a,!1),w.pointToWorldFrame(i,e,t.pillarOffset,zt),this._intersectConvex(t.pillarConvex,e,zt,s,n,Et),this.result.shouldStop)return;t.getConvexTrianglePillar(r,a,!0),w.pointToWorldFrame(i,e,t.pillarOffset,zt),this._intersectConvex(t.pillarConvex,e,zt,s,n,Et)}}}_intersectSphere(t,e,i,s,n){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-i.x)+(r.y-o.y)*(o.y-i.y)+(r.z-o.z)*(o.z-i.z)),c=h**2-4*l*((o.x-i.x)**2+(o.y-i.y)**2+(o.z-i.z)**2-a**2),u=At,d=Mt;if(!(c<0))if(0===c)o.lerp(r,c,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(o.lerp(r,t,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(o.lerp(r,e,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,n,s,-1))}}_intersectConvex(t,e,i,s,n,o){const r=Ft,a=Ct,l=o&&o.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,f=p.distanceTo(y),v=l?l.length:h.length,m=this.result;for(let t=0;!m.shouldStop&&t<v;t++){const o=l?l[t]:t,y=h[o],v=u[o],w=e,g=i;a.copy(c[y[0]]),w.vmult(a,a),a.vadd(g,a),a.vsub(p,a),w.vmult(v,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,wt),wt.vadd(p,wt),gt.copy(c[y[0]]),w.vmult(gt,gt),g.vadd(gt,gt);for(let t=1;!m.shouldStop&&t<y.length-1;t++){xt.copy(c[y[t]]),bt.copy(c[y[t+1]]),w.vmult(xt,xt),w.vmult(bt,bt),g.vadd(xt,xt),g.vadd(bt,bt);const e=wt.distanceTo(p);!ut.pointInTriangle(wt,gt,xt,bt)&&!ut.pointInTriangle(wt,xt,gt,bt)||e>f||this.reportIntersection(r,wt,n,s,o)}}}}_intersectTrimesh(t,e,i,s,n,o){const r=Tt,a=Lt,l=jt,h=Ct,c=Rt,u=Nt,d=Pt,p=qt,y=It,f=t.indices;t.vertices;const v=this.from,m=this.to,g=this.direction;l.position.copy(i),l.quaternion.copy(e),w.vectorToLocalFrame(i,e,g,c),w.pointToLocalFrame(i,e,v,u),w.pointToLocalFrame(i,e,m,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let o=0,l=a.length;!this.result.shouldStop&&o!==l;o++){const l=a[o];t.getNormal(l,r),t.getVertex(f[3*l],gt),gt.vsub(u,h);const d=c.dot(r),v=r.dot(h)/d;if(v<0)continue;c.scale(v,wt),wt.vadd(u,wt),t.getVertex(f[3*l+1],xt),t.getVertex(f[3*l+2],bt);const m=wt.distanceSquared(u);!ut.pointInTriangle(wt,xt,gt,bt)&&!ut.pointInTriangle(wt,gt,xt,bt)||m>x||(w.vectorToWorldFrame(e,r,y),w.pointToWorldFrame(i,e,wt,p),this.reportIntersection(y,p,n,s,l))}a.length=0}reportIntersection(t,e,i,s,n){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==n?n:-1,this.mode){case ut.ALL:this.hasHit=!0,l.set(o,r,t,e,i,s,a),l.hasHit=!0,this.callback(l);break;case ut.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a));break;case ut.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,i,s,a),l.shouldStop=!0}}static pointInTriangle(t,e,i,s){s.vsub(e,Ot),i.vsub(e,yt),t.vsub(e,ft);const n=Ot.dot(Ot),o=Ot.dot(yt),r=Ot.dot(ft),a=yt.dot(yt),l=yt.dot(ft);let h,c;return(h=a*r-o*l)>=0&&(c=n*l-o*r)>=0&&h+c<n*a-o*o}}ut.CLOSEST=lt,ut.ANY=ht,ut.ALL=ct;const dt=new h,pt=[],yt=new o,ft=new o,vt=new o,mt=new y,wt=new o,gt=new o,xt=new o,bt=new o;new o,new tt;const Et={faceList:[0]},zt=new o,Bt=new ut,St=[],At=new o,Mt=new o,Ft=new o,Ct=(new o,new o,new o),Tt=new o,Rt=new o,Nt=new o,Pt=new o,It=new o,qt=new o;new h;const Lt=[],jt=new w,Ot=new o,Vt=new o;class kt{static defaults(t,e){void 0===t&&(t={});for(let i in e)i in t||(t[i]=e[i]);return t}}class Ht{constructor(t,e,i){void 0===i&&(i={}),i=kt.defaults(i,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Ht.idCounter++,this.collideConnected=i.collideConnected,i.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Ht.idCounter=0;class Wt{constructor(){this.spatial=new o,this.rotational=new o}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Gt{constructor(t,e,i,s){void 0===i&&(i=-1e6),void 0===s&&(s=1e6),this.id=Gt.idCounter++,this.minForce=i,this.maxForce=s,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Wt,this.jacobianElementB=new Wt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,i){const s=e,n=t,o=i;this.a=4/(o*(1+4*s)),this.b=4*s/(1+4*s),this.eps=4/(o*o*n*(1+4*s))}computeB(t,e,i){const s=this.computeGW();return-this.computeGq()*t-s*e-this.computeGiMf()*i}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.position,o=s.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.velocity,o=s.velocity,r=i.angularVelocity,a=s.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.vlambda,o=s.vlambda,r=i.wlambda,a=s.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.force,o=i.torque,r=s.force,a=s.torque,l=i.invMassSolve,h=s.invMassSolve;return n.scale(l,Dt),r.scale(h,Yt),i.invInertiaWorldSolve.vmult(o,Ut),s.invInertiaWorldSolve.vmult(a,Xt),t.multiplyVectors(Dt,Ut)+e.multiplyVectors(Yt,Xt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,n=i.invMassSolve,o=s.invMassSolve,r=i.invInertiaWorldSolve,a=s.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,_t),l+=_t.dot(t.rotational),a.vmult(e.rotational,_t),l+=_t.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,i=this.jacobianElementB,s=this.bi,n=this.bj,o=Zt;s.vlambda.addScaledVector(s.invMassSolve*t,e.spatial,s.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,i.spatial,n.vlambda),s.invInertiaWorldSolve.vmult(e.rotational,o),s.wlambda.addScaledVector(t,o,s.wlambda),n.invInertiaWorldSolve.vmult(i.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Gt.idCounter=0;const Dt=new o,Yt=new o,Ut=new o,Xt=new o,_t=new o,Zt=new o;class $t extends Gt{constructor(t,e,i){void 0===i&&(i=1e6),super(t,e,0,i),this.restitution=0,this.ri=new o,this.rj=new o,this.ni=new o}computeB(t){const e=this.a,i=this.b,s=this.bi,n=this.bj,o=this.ri,r=this.rj,a=Kt,l=Qt,h=s.velocity,c=s.angularVelocity;s.force,s.torque;const u=n.velocity,d=n.angularVelocity;n.force,n.torque;const p=Jt,y=this.jacobianElementA,f=this.jacobianElementB,v=this.ni;o.cross(v,a),r.cross(v,l),v.negate(y.spatial),a.negate(y.rotational),f.spatial.copy(v),f.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(s.position,p),p.vsub(o,p);const m=v.dot(p),w=this.restitution+1;return-m*e-(w*u.dot(v)-w*h.dot(v)+d.dot(l)-c.dot(a))*i-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=te,e=ee,i=ie,s=se,n=ne;return this.bi.position.vadd(this.ri,i),this.bj.position.vadd(this.rj,s),this.bi.getVelocityAtWorldPoint(i,t),this.bj.getVelocityAtWorldPoint(s,e),t.vsub(e,n),this.ni.dot(n)}}const Kt=new o,Qt=new o,Jt=new o,te=new o,ee=new o,ie=new o,se=new o,ne=new o;new o,new o;new o,new o;new o,new o;new o,new o;new o,new o;class oe extends Gt{constructor(t,e,i){super(t,e,-i,i),this.ri=new o,this.rj=new o,this.t=new o}computeB(t){this.a;const e=this.b;this.bi,this.bj;const i=this.ri,s=this.rj,n=re,o=ae,r=this.t;i.cross(r,n),s.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),n.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);return-this.computeGW()*e-t*this.computeGiMf()}}const re=new o,ae=new o;class le{constructor(t,e,i){i=kt.defaults(i,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=le.idCounter++,this.materials=[t,e],this.friction=i.friction,this.restitution=i.restitution,this.contactEquationStiffness=i.contactEquationStiffness,this.contactEquationRelaxation=i.contactEquationRelaxation,this.frictionEquationStiffness=i.frictionEquationStiffness,this.frictionEquationRelaxation=i.frictionEquationRelaxation}}le.idCounter=0;class he{constructor(t){void 0===t&&(t={});let e="";"string"==typeof t&&(e=t,t={}),this.name=e,this.id=he.idCounter++,this.friction=void 0!==t.friction?t.friction:-1,this.restitution=void 0!==t.restitution?t.restitution:-1}}he.idCounter=0;new o,new o,new o,new o,new o,new o,new o,new o,new o,new o,new o;new o,new o;new o,new o,new o;new o,new o,new o;new ut,new o;new o,new o,new o(1,0,0),new o(0,1,0),new o(0,0,1),new o,new o,new o,new o;new o,new o,new o,new o;new o,new o,new o;class ce extends m{constructor(t){if(super({type:m.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new o);const i=2*t*this.radius*this.radius/5;return e.x=i,e.y=i,e.z=i,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,i,s){const n=this.radius,o=["x","y","z"];for(let e=0;e<o.length;e++){const r=o[e];i[r]=t[r]-n,s[r]=t[r]+n}}}new o,new o;new o,new o,new o,new o,new o,new o,new o;class ue extends x{constructor(t,e,i,s){if(void 0===t&&(t=1),void 0===e&&(e=1),void 0===i&&(i=1),void 0===s&&(s=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const n=s,r=[],a=[],l=[],h=[],c=[],u=Math.cos,d=Math.sin;r.push(new o(-e*d(0),.5*-i,e*u(0))),h.push(0),r.push(new o(-t*d(0),.5*i,t*u(0))),c.push(1);for(let s=0;s<n;s++){const p=2*Math.PI/n*(s+1),y=2*Math.PI/n*(s+.5);s<n-1?(r.push(new o(-e*d(p),.5*-i,e*u(p))),h.push(2*s+2),r.push(new o(-t*d(p),.5*i,t*u(p))),c.push(2*s+3),l.push([2*s,2*s+1,2*s+3,2*s+2])):l.push([2*s,2*s+1,1,0]),(n%2==1||s<n/2)&&a.push(new o(-d(y),0,u(y)))}l.push(h),a.push(new o(0,1,0));const p=[];for(let t=0;t<c.length;t++)p.push(c[c.length-t-1]);l.push(p),super({vertices:r,faces:l,axes:a}),this.type=m.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=i,this.numSegments=s}}new o;new o,new o,new o,new o,new o,new o,new o,new o,new o;class de{constructor(t){void 0===t&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new h,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,i){void 0===i&&(i=0);const s=this.data;if(!this.aabb.contains(t))return!1;const n=this.children;if(i<(this.maxDepth||this.root.maxDepth)){let s=!1;n.length||(this.subdivide(),s=!0);for(let s=0;8!==s;s++)if(n[s].insert(t,e,i+1))return!0;s&&(n.length=0)}return s.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,i=t.upperBound,s=this.children;s.push(new de({aabb:new h({lowerBound:new o(0,0,0)})}),new de({aabb:new h({lowerBound:new o(1,0,0)})}),new de({aabb:new h({lowerBound:new o(1,1,0)})}),new de({aabb:new h({lowerBound:new o(1,1,1)})}),new de({aabb:new h({lowerBound:new o(0,1,1)})}),new de({aabb:new h({lowerBound:new o(0,0,1)})}),new de({aabb:new h({lowerBound:new o(1,0,1)})}),new de({aabb:new h({lowerBound:new o(0,1,0)})})),i.vsub(e,ye),ye.scale(.5,ye);const n=this.root||this;for(let t=0;8!==t;t++){const i=s[t];i.root=n;const o=i.aabb.lowerBound;o.x*=ye.x,o.y*=ye.y,o.z*=ye.z,o.vadd(e,o),o.vadd(ye,i.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const i=[this];for(;i.length;){const s=i.pop();s.aabb.overlaps(t)&&Array.prototype.push.apply(e,s.data),Array.prototype.push.apply(i,s.children)}return e}rayQuery(t,e,i){return t.getAABB(fe),fe.toLocalFrame(e,fe),this.aabbQuery(fe,i),i}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),this.children[t].children.length||this.children[t].data.length||this.children.splice(t,1)}}class pe extends de{constructor(t,e){void 0===e&&(e={}),super({root:null,aabb:t}),this.maxDepth=void 0!==e.maxDepth?e.maxDepth:8}}const ye=new o,fe=new h;class ve extends m{constructor(t,e){super({type:m.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new h,this.edges=null,this.scale=new o(1,1,1),this.tree=new pe,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const i=new h,s=new o,n=new o,r=new o,a=[s,n,r];for(let e=0;e<this.indices.length/3;e++){const o=3*e;this._getUnscaledVertex(this.indices[o],s),this._getUnscaledVertex(this.indices[o+1],n),this._getUnscaledVertex(this.indices[o+2],r),i.setFromPoints(a),t.insert(i,e)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){we.copy(t);const i=this.scale,s=i.x,n=i.y,o=i.z,r=we.lowerBound,a=we.upperBound;return r.x/=s,r.y/=n,r.z/=o,a.x/=s,a.y/=n,a.z/=o,this.tree.aabbQuery(we,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,i=t.x===t.y&&t.y===t.z;e&&i||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=me,e=this.normals;for(let i=0;i<this.indices.length/3;i++){const s=3*i,n=this.indices[s],o=this.indices[s+1],r=this.indices[s+2];this.getVertex(n,ze),this.getVertex(o,Be),this.getVertex(r,Se),ve.computeNormal(Be,ze,Se,t),e[s]=t.x,e[s+1]=t.y,e[s+2]=t.z}}updateEdges(){const t={},e=(e,i)=>{t[e<i?`${e}_${i}`:`${i}_${e}`]=!0};for(let t=0;t<this.indices.length/3;t++){const i=3*t,s=this.indices[i],n=this.indices[i+1],o=this.indices[i+2];e(s,n),e(n,o),e(o,s)}const i=Object.keys(t);this.edges=new Int16Array(2*i.length);for(let t=0;t<i.length;t++){const e=i[t].split("_");this.edges[2*t]=parseInt(e[0],10),this.edges[2*t+1]=parseInt(e[1],10)}}getEdgeVertex(t,e,i){const s=this.edges[2*t+(e?1:0)];this.getVertex(s,i)}getEdgeVector(t,e){const i=ge,s=xe;this.getEdgeVertex(t,0,i),this.getEdgeVertex(t,1,s),s.vsub(i,e)}static computeNormal(t,e,i,s){e.vsub(t,Ee),i.vsub(e,be),be.cross(Ee,s),s.isZero()||s.normalize()}getVertex(t,e){const i=this.scale;return this._getUnscaledVertex(t,e),e.x*=i.x,e.y*=i.y,e.z*=i.z,e}_getUnscaledVertex(t,e){const i=3*t,s=this.vertices;return e.set(s[i],s[i+1],s[i+2])}getWorldVertex(t,e,i,s){return this.getVertex(t,s),w.pointToWorldFrame(e,i,s,s),s}getTriangleVertices(t,e,i,s){const n=3*t;this.getVertex(this.indices[n],e),this.getVertex(this.indices[n+1],i),this.getVertex(this.indices[n+2],s)}getNormal(t,e){const i=3*t;return e.set(this.normals[i],this.normals[i+1],this.normals[i+2])}calculateLocalInertia(t,e){this.computeLocalAABB(Ae);const i=Ae.upperBound.x-Ae.lowerBound.x,s=Ae.upperBound.y-Ae.lowerBound.y,n=Ae.upperBound.z-Ae.lowerBound.z;return e.set(1/12*t*(2*s*2*s+2*n*2*n),1/12*t*(2*i*2*i+2*n*2*n),1/12*t*(2*s*2*s+2*i*2*i))}computeLocalAABB(t){const e=t.lowerBound,i=t.upperBound,s=this.vertices.length;this.vertices;const n=Me;this.getVertex(0,n),e.copy(n),i.copy(n);for(let t=0;t!==s;t++)this.getVertex(t,n),n.x<e.x?e.x=n.x:n.x>i.x&&(i.x=n.x),n.y<e.y?e.y=n.y:n.y>i.y&&(i.y=n.y),n.z<e.z?e.z=n.z:n.z>i.z&&(i.z=n.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,i=new o;for(let s=0,n=e.length/3;s!==n;s++){this.getVertex(s,i);const e=i.lengthSquared();e>t&&(t=e)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,i,s){const n=Fe,o=Ce;n.position=t,n.quaternion=e,this.aabb.toWorldFrame(n,o),i.copy(o.lowerBound),s.copy(o.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,i,s,n){void 0===t&&(t=1),void 0===e&&(e=.5),void 0===i&&(i=8),void 0===s&&(s=6),void 0===n&&(n=2*Math.PI);const o=[],r=[];for(let r=0;r<=i;r++)for(let a=0;a<=s;a++){const l=a/s*n,h=r/i*Math.PI*2,c=(t+e*Math.cos(h))*Math.cos(l),u=(t+e*Math.cos(h))*Math.sin(l),d=e*Math.sin(h);o.push(c,u,d)}for(let t=1;t<=i;t++)for(let e=1;e<=s;e++){const i=(s+1)*t+e-1,n=(s+1)*(t-1)+e-1,o=(s+1)*(t-1)+e,a=(s+1)*t+e;r.push(i,n,a),r.push(n,o,a)}return new ve(o,r)}}const me=new o,we=new h,ge=new o,xe=new o,be=new o,Ee=new o,ze=new o,Be=new o,Se=new o,Ae=new h,Me=new o,Fe=new w,Ce=new h;class Te{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,i=e.indexOf(t);-1!==i&&e.splice(i,1)}removeAllEquations(){this.equations.length=0}}class Re extends Te{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let i=0;const s=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,f;if(0!==r)for(let t=0;t!==l;t++)a[t].updateSolveMassProperties();const v=Pe,m=Ie,w=Ne;v.length=r,m.length=r,w.length=r;for(let t=0;t!==r;t++){const e=o[t];w[t]=0,m[t]=e.computeB(h),v[t]=1/e.computeC()}if(0!==r){for(let t=0;t!==l;t++){const e=a[t],i=e.vlambda,s=e.wlambda;i.set(0,0,0),s.set(0,0,0)}for(i=0;i!==s;i++){p=0;for(let t=0;t!==r;t++){const e=o[t];c=m[t],u=v[t],f=w[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*f),f+d<e.minForce?d=e.minForce-f:f+d>e.maxForce&&(d=e.maxForce-f),w[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<n)break}for(let t=0;t!==l;t++){const e=a[t],i=e.velocity,s=e.angularVelocity;e.vlambda.vmul(e.linearFactor,e.vlambda),i.vadd(e.vlambda,i),e.wlambda.vmul(e.angularFactor,e.wlambda),s.vadd(e.wlambda,s)}let t=o.length;const e=1/h;for(;t--;)o[t].multiplier=w[t]*e}return i}}const Ne=[],Pe=[],Ie=[];I.STATIC;class qe{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class Le extends qe{constructor(){super(...arguments),this.type=o}constructObject(){return new o}}const je=m.types.SPHERE,Oe=m.types.SPHERE|m.types.PLANE,Ve=m.types.BOX|m.types.BOX,ke=m.types.SPHERE|m.types.BOX,He=m.types.PLANE|m.types.BOX,We=m.types.CONVEXPOLYHEDRON,Ge=m.types.SPHERE|m.types.CONVEXPOLYHEDRON,De=m.types.PLANE|m.types.CONVEXPOLYHEDRON,Ye=m.types.BOX|m.types.CONVEXPOLYHEDRON,Ue=m.types.SPHERE|m.types.HEIGHTFIELD,Xe=m.types.BOX|m.types.HEIGHTFIELD,_e=m.types.CONVEXPOLYHEDRON|m.types.HEIGHTFIELD,Ze=m.types.PARTICLE|m.types.SPHERE,$e=m.types.PLANE|m.types.PARTICLE,Ke=m.types.BOX|m.types.PARTICLE,Qe=m.types.PARTICLE|m.types.CONVEXPOLYHEDRON,Je=m.types.CYLINDER,ti=m.types.SPHERE|m.types.CYLINDER,ei=m.types.PLANE|m.types.CYLINDER,ii=m.types.BOX|m.types.CYLINDER,si=m.types.CONVEXPOLYHEDRON|m.types.CYLINDER,ni=m.types.HEIGHTFIELD|m.types.CYLINDER,oi=m.types.PARTICLE|m.types.CYLINDER,ri=m.types.SPHERE|m.types.TRIMESH,ai=m.types.PLANE|m.types.TRIMESH;class li{get[je](){return this.sphereSphere}get[Oe](){return this.spherePlane}get[Ve](){return this.boxBox}get[ke](){return this.sphereBox}get[He](){return this.planeBox}get[We](){return this.convexConvex}get[Ge](){return this.sphereConvex}get[De](){return this.planeConvex}get[Ye](){return this.boxConvex}get[Ue](){return this.sphereHeightfield}get[Xe](){return this.boxHeightfield}get[_e](){return this.convexHeightfield}get[Ze](){return this.sphereParticle}get[$e](){return this.planeParticle}get[Ke](){return this.boxParticle}get[Qe](){return this.convexParticle}get[Je](){return this.convexConvex}get[ti](){return this.sphereConvex}get[ei](){return this.planeConvex}get[ii](){return this.boxConvex}get[si](){return this.convexConvex}get[ni](){return this.heightfieldCylinder}get[oi](){return this.particleCylinder}get[ri](){return this.sphereTrimesh}get[ai](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Le,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,i,s,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new $t(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&i.collisionResponse&&s.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=i.material||t.material,h=s.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=n||i,r.sj=o||s,r}createFrictionEquationsFromContact(t,e){const i=t.bi,s=t.bj,n=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=n.material||i.material,c=o.material||s.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const n=l*(r.frictionGravity||r.gravity).length();let o=i.invMass+s.invMass;o>0&&(o=1/o);const h=this.frictionEquationPool,c=h.length?h.pop():new oe(i,s,n*o),u=h.length?h.pop():new oe(i,s,n*o);return c.bi=u.bi=i,c.bj=u.bj=s,c.minForce=u.minForce=-n*o,c.maxForce=u.maxForce=n*o,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const i=this.frictionResult[this.frictionResult.length-2],s=this.frictionResult[this.frictionResult.length-1];hi.setZero(),ci.setZero(),ui.setZero();const n=e.bi;e.bj;for(let i=0;i!==t;i++)e=this.result[this.result.length-1-i],e.bi!==n?(hi.vadd(e.ni,hi),ci.vadd(e.ri,ci),ui.vadd(e.rj,ui)):(hi.vsub(e.ni,hi),ci.vadd(e.rj,ci),ui.vadd(e.ri,ui));const o=1/t;ci.scale(o,i.ri),ui.scale(o,i.rj),s.ri.copy(i.ri),s.rj.copy(i.rj),hi.normalize(),hi.tangents(i.t,s.t)}getContacts(t,e,i,s,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=s,this.frictionResult=o;const a=yi,l=fi,h=di,c=pi;for(let s=0,n=t.length;s!==n;s++){const n=t[s],o=e[s];let r=null;n.material&&o.material&&(r=i.getContactMaterial(n.material,o.material)||null);const u=n.type&I.KINEMATIC&&o.type&I.STATIC||n.type&I.STATIC&&o.type&I.KINEMATIC||n.type&I.KINEMATIC&&o.type&I.KINEMATIC;for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],a),n.quaternion.vmult(n.shapeOffsets[t],h),h.vadd(n.position,h);const e=n.shapes[t];for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],l),o.quaternion.vmult(o.shapeOffsets[t],c),c.vadd(o.position,c);const s=o.shapes[t];if(!(e.collisionFilterMask&s.collisionFilterGroup&&s.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+s.boundingSphereRadius)continue;let d=null;e.material&&s.material&&(d=i.getContactMaterial(e.material,s.material)||null),this.currentContactMaterial=d||r||i.defaultContactMaterial;const p=this[e.type|s.type];if(p){let t=!1;t=e.type<s.type?p.call(this,e,s,h,c,a,l,n,o,e,s,u):p.call(this,s,e,c,h,l,a,o,n,e,s,u),t&&u&&(i.shapeOverlapKeeper.set(e.id,s.id),i.bodyOverlapKeeper.set(n.id,o.id))}}}}}sphereSphere(t,e,i,s,n,o,r,a,l,h,c){if(c)return i.distanceSquared(s)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);s.vsub(i,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(i,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(s,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,i,s,n,o,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),o.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),i.vsub(s,Ii),u.ni.scale(u.ni.dot(Ii),qi),Ii.vsub(qi,u.rj),-Ii.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(i,t),t.vsub(r.position,t),e.vadd(s,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}sphereBox(t,e,i,s,n,o,r,a,l,h,c){const u=this.v3pool,d=Di;i.vsub(s,ki),e.getSideNormals(d,o);const p=t.radius;let y=!1;const f=Ui,v=Xi,m=_i;let w=null,g=0,x=0,b=0,E=null;for(let t=0,e=d.length;t!==e&&!1===y;t++){const e=Hi;e.copy(d[t]);const i=e.length();e.normalize();const s=ki.dot(e);if(s<i+p&&s>0){const n=Wi,o=Gi;n.copy(d[(t+1)%3]),o.copy(d[(t+2)%3]);const r=n.length(),a=o.length();n.normalize(),o.normalize();const l=ki.dot(n),h=ki.dot(o);if(l<r&&l>-r&&h<a&&h>-a){const t=Math.abs(s-i-p);if((null===E||t<E)&&(E=t,x=l,b=h,w=i,f.copy(e),v.copy(n),m.copy(o),g++,c))return!0}}}if(g){y=!0;const n=this.createContactEquation(r,a,t,e,l,h);f.scale(-p,n.ri),n.ni.copy(f),n.ni.negate(n.ni),f.scale(w,f),v.scale(x,v),f.vadd(v,f),m.scale(b,m),f.vadd(m,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}let z=u.get();const B=Yi;for(let n=0;2!==n&&!y;n++)for(let o=0;2!==o&&!y;o++)for(let u=0;2!==u&&!y;u++)if(z.set(0,0,0),n?z.vadd(d[0],z):z.vsub(d[0],z),o?z.vadd(d[1],z):z.vsub(d[1],z),u?z.vadd(d[2],z):z.vsub(d[2],z),s.vadd(z,B),B.vsub(i,B),B.lengthSquared()<p*p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);n.ri.copy(B),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(p,n.ri),n.rj.copy(z),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}u.release(z),z=null;const S=u.get(),A=u.get(),M=u.get(),F=u.get(),C=u.get(),T=d.length;for(let n=0;n!==T&&!y;n++)for(let o=0;o!==T&&!y;o++)if(n%3!=o%3){d[o].cross(d[n],S),S.normalize(),d[n].vadd(d[o],A),M.copy(i),M.vsub(A,M),M.vsub(s,M);const u=M.dot(S);S.scale(u,F);let f=0;for(;f===n%3||f===o%3;)f++;C.copy(i),C.vsub(F,C),C.vsub(A,C),C.vsub(s,C);const v=Math.abs(u),m=C.length();if(v<d[f].length()&&m<p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);A.vadd(F,n.rj),n.rj.copy(n.rj),C.negate(n.ni),n.ni.normalize(),n.ri.copy(n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(i,n.ri),n.ri.normalize(),n.ri.scale(p,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}u.release(S,A,M,F,C)}planeBox(t,e,i,s,n,o,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,i,s,n,o,r,a,t,e,c)}convexConvex(t,e,i,s,n,o,r,a,l,h,c,u,d){const p=hs;if(!(i.distanceTo(s)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,i,n,s,o,p,u,d)){const u=[],d=cs;t.clipAgainstHull(i,n,e,s,o,p,-100,100,u);let y=0;for(let n=0;n!==u.length;n++){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),f=o.ri,v=o.rj;p.negate(o.ni),u[n].normal.negate(d),d.scale(u[n].depth,d),u[n].point.vadd(d,f),v.copy(u[n].point),f.vsub(i,f),v.vsub(s,v),f.vadd(i,f),f.vsub(r.position,f),v.vadd(s,v),v.vsub(a.position,v),this.result.push(o),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,i,s,n,o,r,a,l,h,c){const u=this.v3pool;i.vsub(s,Zi);const d=e.faceNormals,p=e.faces,y=e.vertices,f=t.radius;let v=!1;for(let n=0;n!==y.length;n++){const u=y[n],d=Ji;o.vmult(u,d),s.vadd(d,d);const p=Qi;if(d.vsub(i,p),p.lengthSquared()<f*f){if(c)return!0;v=!0;const n=this.createContactEquation(r,a,t,e,l,h);return n.ri.copy(p),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(f,n.ri),d.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),void this.createFrictionEquationsFromContact(n,this.frictionResult)}}for(let n=0,m=p.length;n!==m&&!1===v;n++){const m=d[n],w=p[n],g=ts;o.vmult(m,g);const x=es;o.vmult(y[w[0]],x),x.vadd(s,x);const b=is;g.scale(-f,b),i.vadd(b,b);const E=ss;b.vsub(x,E);const z=E.dot(g),B=ns;if(i.vsub(x,B),z<0&&B.dot(g)>0){const n=[];for(let t=0,e=w.length;t!==e;t++){const e=u.get();o.vmult(y[w[t]],e),s.vadd(e,e),n.push(e)}if(Vi(n,g,i)){if(c)return!0;v=!0;const o=this.createContactEquation(r,a,t,e,l,h);g.scale(-f,o.ri),g.negate(o.ni);const d=u.get();g.scale(-z,d);const p=u.get();g.scale(-f,p),i.vsub(s,o.rj),o.rj.vadd(p,o.rj),o.rj.vadd(d,o.rj),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),u.release(d),u.release(p),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return}for(let d=0;d!==w.length;d++){const p=u.get(),v=u.get();o.vmult(y[w[(d+1)%w.length]],p),o.vmult(y[w[(d+2)%w.length]],v),s.vadd(p,p),s.vadd(v,v);const m=$i;v.vsub(p,m);const g=Ki;m.unit(g);const x=u.get(),b=u.get();i.vsub(p,b);const E=b.dot(g);g.scale(E,x),x.vadd(p,x);const z=u.get();if(x.vsub(i,z),E>0&&E*E<m.lengthSquared()&&z.lengthSquared()<f*f){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);x.vsub(s,o.rj),x.vsub(i,o.ni),o.ni.normalize(),o.ni.scale(f,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return u.release(p),u.release(v),u.release(x),u.release(z),void u.release(b)}u.release(p),u.release(v),u.release(x),u.release(z),u.release(b)}for(let t=0,e=n.length;t!==e;t++)u.release(n[t])}}}planeConvex(t,e,i,s,n,o,r,a,l,h,c){const u=os,d=rs;d.set(0,0,1),n.vmult(d,d);let p=0;const y=as;for(let n=0;n!==e.vertices.length;n++){u.copy(e.vertices[n]),o.vmult(u,u),s.vadd(u,u),u.vsub(i,y);if(d.dot(y)<=0){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),o=ls;d.scale(d.dot(y),o),u.vsub(o,o),o.vsub(i,n.ri),n.ni.copy(d),u.vsub(s,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}sphereHeightfield(t,e,i,s,n,o,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=Bs,f=zs;w.pointToLocalFrame(s,o,i,f);let v=Math.floor((f.x-d)/p)-1,m=Math.ceil((f.x+d)/p)+1,g=Math.floor((f.y-d)/p)-1,x=Math.ceil((f.y+d)/p)+1;if(m<0||x<0||v>u.length||g>u[0].length)return;v<0&&(v=0),m<0&&(m=0),g<0&&(g=0),x<0&&(x=0),v>=u.length&&(v=u.length-1),m>=u.length&&(m=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(v,g,m,x,b);const E=b[0],z=b[1];if(f.z-d>z||f.z+d<E)return;const B=this.result;for(let l=v;l<m;l++)for(let h=g;h<x;h++){const u=B.length;let d=!1;if(e.getConvexTrianglePillar(l,h,!1),w.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&d)return!0;if(e.getConvexTrianglePillar(l,h,!0),w.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(d=this.sphereConvex(t,e.pillarConvex,i,y,n,o,r,a,t,e,c)),c&&d)return!0;if(B.length-u>2)return}}boxHeightfield(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexHeightfield(t,e,i,s,n,o,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=bs,f=Es,v=xs;w.pointToLocalFrame(s,o,i,v);let m=Math.floor((v.x-p)/d)-1,g=Math.ceil((v.x+p)/d)+1,x=Math.floor((v.y-p)/d)-1,b=Math.ceil((v.y+p)/d)+1;if(g<0||b<0||m>u.length||x>u[0].length)return;m<0&&(m=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),m>=u.length&&(m=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const E=[];e.getRectMinMax(m,x,g,b,E);const z=E[0],B=E[1];if(!(v.z-p>B||v.z+p<z))for(let l=m;l<g;l++)for(let h=x;h<b;h++){let u=!1;if(e.getConvexTrianglePillar(l,h,!1),w.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,f,null)),c&&u)return!0;if(e.getConvexTrianglePillar(l,h,!0),w.pointToWorldFrame(s,o,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.convexConvex(t,e.pillarConvex,i,y,n,o,r,a,null,null,c,f,null)),c&&u)return!0}}sphereParticle(t,e,i,s,n,o,r,a,l,h,c){const u=ys;u.set(0,0,1),s.vsub(i,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);u.normalize(),i.rj.copy(u),i.rj.scale(t.radius,i.rj),i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}planeParticle(t,e,i,s,n,o,r,a,l,h,c){const u=us;u.set(0,0,1),r.quaternion.vmult(u,u);const d=ds;s.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0);const n=ps;u.scale(u.dot(s),n),s.vsub(n,n),i.rj.copy(n),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}boxParticle(t,e,i,s,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,i,s,n,o,r,a,t,e,c)}convexParticle(t,e,i,s,n,o,r,a,l,h,c){let u=-1;const d=ms,p=gs;let y=null;const f=vs;if(f.copy(s),f.vsub(i,f),n.conjugate(fs),fs.vmult(f,f),t.pointIsInside(f)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(i,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let e=0,i=t.faces.length;e!==i;e++){const i=[t.worldVertices[t.faces[e][0]]],n=t.worldFaceNormals[e];s.vsub(i[0],ws);const o=-n.dot(ws);if(null===y||Math.abs(o)<Math.abs(y)){if(c)return!0;y=o,u=e,d.copy(n)}}if(-1!==u){const n=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(s,p),p.vsub(i,p),n.rj.copy(p),d.negate(n.ni),n.ri.set(0,0,0);const o=n.ri,c=n.rj;o.vadd(s,o),o.vsub(a.position,o),c.vadd(i,c),c.vsub(r.position,c),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexHeightfield(e,t,s,i,o,n,a,r,l,h,c)}particleCylinder(t,e,i,s,n,o,r,a,l,h,c){return this.convexParticle(e,t,s,i,o,n,a,r,l,h,c)}sphereTrimesh(t,e,i,s,n,o,r,a,l,h,c){const u=zi,d=Bi,p=Si,y=Ai,f=Mi,v=Fi,m=Ni,g=Ei,x=xi,b=Pi;w.pointToLocalFrame(s,o,i,f);const E=t.radius;m.lowerBound.set(f.x-E,f.y-E,f.z-E),m.upperBound.set(f.x+E,f.y+E,f.z+E),e.getTrianglesInAABB(m,b);const z=bi,B=t.radius*t.radius;for(let n=0;n<b.length;n++)for(let u=0;u<3;u++)if(e.getVertex(e.indices[3*b[n]+u],z),z.vsub(f,x),x.lengthSquared()<=B){if(g.copy(z),w.pointToWorldFrame(s,o,g,z),z.vsub(i,x),c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);n.ni.copy(x),n.ni.normalize(),n.ri.copy(n.ni),n.ri.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),n.rj.copy(z),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}for(let n=0;n<b.length;n++)for(let m=0;m<3;m++){e.getVertex(e.indices[3*b[n]+m],u),e.getVertex(e.indices[3*b[n]+(m+1)%3],d),d.vsub(u,p),f.vsub(d,v);const g=v.dot(p);f.vsub(u,v);let x=v.dot(p);if(x>0&&g<0){f.vsub(u,v),y.copy(p),y.normalize(),x=v.dot(y),y.scale(x,v),v.vadd(u,v);if(v.distanceTo(f)<t.radius){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);v.vsub(f,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),w.pointToWorldFrame(s,o,v,v),v.vsub(a.position,n.rj),w.vectorToWorldFrame(o,n.ni,n.ni),w.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}}const S=Ci,A=Ti,M=Ri,F=gi;for(let n=0,u=b.length;n!==u;n++){e.getTriangleVertices(b[n],S,A,M),e.getNormal(b[n],F),f.vsub(S,v);let u=v.dot(F);if(F.scale(u,v),f.vsub(v,v),u=v.distanceTo(f),ut.pointInTriangle(v,S,A,M)&&u<t.radius){if(c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);v.vsub(f,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),w.pointToWorldFrame(s,o,v,v),v.vsub(a.position,n.rj),w.vectorToWorldFrame(o,n.ni,n.ni),w.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}b.length=0}planeTrimesh(t,e,i,s,n,r,a,l,h,c,u){const d=new o,p=vi;p.set(0,0,1),n.vmult(p,p);for(let n=0;n<e.vertices.length/3;n++){e.getVertex(n,d);const y=new o;y.copy(d),w.pointToWorldFrame(s,r,y,d);const f=mi;d.vsub(i,f);if(p.dot(f)<=0){if(u)return!0;const i=this.createContactEquation(a,l,t,e,h,c);i.ni.copy(p);const s=wi;p.scale(f.dot(p),s),d.vsub(s,s),i.ri.copy(s),i.ri.vsub(a.position,i.ri),i.rj.copy(d),i.rj.vsub(l.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}}}const hi=new o,ci=new o,ui=new o,di=new o,pi=new o,yi=new y,fi=new y,vi=new o,mi=new o,wi=new o,gi=new o,xi=new o;new o;const bi=new o,Ei=new o,zi=new o,Bi=new o,Si=new o,Ai=new o,Mi=new o,Fi=new o,Ci=new o,Ti=new o,Ri=new o,Ni=new h,Pi=[],Ii=new o,qi=new o,Li=new o,ji=new o,Oi=new o;function Vi(t,e,i){let s=null;const n=t.length;for(let o=0;o!==n;o++){const r=t[o],a=Li;t[(o+1)%n].vsub(r,a);const l=ji;a.cross(e,l);const h=Oi;i.vsub(r,h);const c=l.dot(h);if(!(null===s||c>0&&!0===s||c<=0&&!1===s))return!1;null===s&&(s=c>0)}return!0}const ki=new o,Hi=new o,Wi=new o,Gi=new o,Di=[new o,new o,new o,new o,new o,new o],Yi=new o,Ui=new o,Xi=new o,_i=new o,Zi=new o,$i=new o,Ki=new o,Qi=new o,Ji=new o,ts=new o,es=new o,is=new o,ss=new o,ns=new o;new o,new o;const os=new o,rs=new o,as=new o,ls=new o,hs=new o,cs=new o,us=new o,ds=new o,ps=new o,ys=new o,fs=new y,vs=new o;new o;const ms=new o,ws=new o,gs=new o,xs=new o,bs=new o,Es=[0],zs=new o,Bs=new o;class Ss{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const i=e;e=t,t=i}return t<<16|e}set(t,e){const i=this.getKey(t,e),s=this.current;let n=0;for(;i>s[n];)n++;if(i!==s[n]){for(let t=s.length-1;t>=n;t--)s[t+1]=s[t];s[n]=i}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const i=this.current,s=this.previous,n=i.length,o=s.length;let r=0;for(let e=0;e<n;e++){let n=!1;const o=i[e];for(;o>s[r];)r++;n=o===s[r],n||As(t,o)}r=0;for(let t=0;t<o;t++){let n=!1;const o=s[t];for(;o>i[r];)r++;n=i[r]===o,n||As(e,o)}}}function As(t,e){t.push((4294901760&e)>>16,65535&e)}const Ms=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class Fs{constructor(){this.data={keys:[]}}get(t,e){const i=Ms(t,e);return this.data[i]}set(t,e,i){const s=Ms(t,e);this.get(t,e)||this.data.keys.push(s),this.data[s]=i}delete(t,e){const i=Ms(t,e),s=this.data.keys.indexOf(i);-1!==s&&this.data.keys.splice(s,1),delete this.data[i]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class Cs extends p{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new o,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new o,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new J,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new Re,this.constraints=[],this.narrowphase=new li(this),this.collisionMatrix=new d,this.collisionMatrixPrevious=new d,this.bodyOverlapKeeper=new Ss,this.shapeOverlapKeeper=new Ss,this.contactmaterials=[],this.contactMaterialTable=new Fs,this.defaultMaterial=new he("default"),this.defaultContactMaterial=new le(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,i){i instanceof tt?this.raycastClosest(t,e,{skipBackfaces:!0},i):this.raycastAll(t,e,{skipBackfaces:!0},i)}raycastAll(t,e,i,s){return void 0===i&&(i={}),i.mode=ut.ALL,i.from=t,i.to=e,i.callback=s,Ts.intersectWorld(this,i)}raycastAny(t,e,i,s){return void 0===i&&(i={}),i.mode=ut.ANY,i.from=t,i.to=e,i.result=s,Ts.intersectWorld(this,i)}raycastClosest(t,e,i,s){return void 0===i&&(i={}),i.mode=ut.CLOSEST,i.from=t,i.to=e,i.result=s,Ts.intersectWorld(this,i)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof I&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,i=this.bodies,s=i.indexOf(t);if(-1!==s){i.splice(s,1);for(let t=0;t!==i.length;t++)i[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let i=0;i<e.length;i++){const s=e[i].shapes;for(let e=0;e<s.length;e++){const i=s[e];if(i.id===t)return i}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const i=Rs.now()/1e3;if(this.lastCallTime){const s=i-this.lastCallTime;this.step(t,s,e)}else this.step(t,void 0,e);this.lastCallTime=i}step(t,e,i){if(void 0===i&&(i=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const s=Rs.now();let n=0;for(;this.accumulator>=t&&n<i&&(this.internalStep(t),this.accumulator-=t,n++,!(Rs.now()-s>1e3*t)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,i=js,s=Os,n=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=I.DYNAMIC;let u=-1/0;const d=this.constraints,p=Ls;a.length();const y=a.x,f=a.y,v=a.z;let m=0;for(l&&(u=Rs.now()),m=0;m!==n;m++){const t=o[m];if(t.type===c){const e=t.force,i=t.mass;e.x+=i*y,e.y+=i*f,e.z+=i*v}}for(let t=0,e=this.subsystems.length;t!==e;t++)this.subsystems[t].update();l&&(u=Rs.now()),i.length=0,s.length=0,this.broadphase.collisionPairs(this,i,s),l&&(h.broadphase=Rs.now()-u);let w=d.length;for(m=0;m!==w;m++){const t=d[m];if(!t.collideConnected)for(let e=i.length-1;e>=0;e-=1)(t.bodyA===i[e]&&t.bodyB===s[e]||t.bodyB===i[e]&&t.bodyA===s[e])&&(i.splice(e,1),s.splice(e,1))}this.collisionMatrixTick(),l&&(u=Rs.now());const g=qs,x=e.length;for(m=0;m!==x;m++)g.push(e[m]);e.length=0;const b=this.frictionEquations.length;for(m=0;m!==b;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(i,s,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=Rs.now()-u),l&&(u=Rs.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const E=e.length;for(let t=0;t!==E;t++){const i=e[t],s=i.bi,n=i.bj,o=i.si,a=i.sj;let l;if(l=s.material&&n.material&&this.getContactMaterial(s.material,n.material)||this.defaultContactMaterial,l.friction,s.material&&n.material&&(s.material.friction>=0&&n.material.friction>=0&&(s.material.friction,n.material.friction),s.material.restitution>=0&&n.material.restitution>=0&&(i.restitution=s.material.restitution*n.material.restitution)),r.addEquation(i),s.allowSleep&&s.type===I.DYNAMIC&&s.sleepState===I.SLEEPING&&n.sleepState===I.AWAKE&&n.type!==I.STATIC){n.velocity.lengthSquared()+n.angularVelocity.lengthSquared()>=2*n.sleepSpeedLimit**2&&(s.wakeUpAfterNarrowphase=!0)}if(n.allowSleep&&n.type===I.DYNAMIC&&n.sleepState===I.SLEEPING&&s.sleepState===I.AWAKE&&s.type!==I.STATIC){s.velocity.lengthSquared()+s.angularVelocity.lengthSquared()>=2*s.sleepSpeedLimit**2&&(n.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(s,n,!0),this.collisionMatrixPrevious.get(s,n)||(Is.body=n,Is.contact=i,s.dispatchEvent(Is),Is.body=s,n.dispatchEvent(Is)),this.bodyOverlapKeeper.set(s.id,n.id),this.shapeOverlapKeeper.set(o.id,a.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=Rs.now()-u,u=Rs.now()),m=0;m!==n;m++){const t=o[m];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(w=d.length,m=0;m!==w;m++){const t=d[m];t.update();for(let e=0,i=t.equations.length;e!==i;e++){const i=t.equations[e];r.addEquation(i)}}r.solve(t,this),l&&(h.solve=Rs.now()-u),r.removeAllEquations();const z=Math.pow;for(m=0;m!==n;m++){const e=o[m];if(e.type&c){const i=z(1-e.linearDamping,t),s=e.velocity;s.scale(i,s);const n=e.angularVelocity;if(n){const i=z(1-e.angularDamping,t);n.scale(i,n)}}}this.dispatchEvent(Ps),l&&(u=Rs.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)==0,S=this.quatNormalizeFast;for(m=0;m!==n;m++)o[m].integrate(t,B,S);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=Rs.now()-u),this.stepnumber+=1,this.dispatchEvent(Ns);let A=!0;if(this.allowSleep)for(A=!1,m=0;m!==n;m++){const t=o[m];t.sleepTick(this.time),t.sleepState!==I.SLEEPING&&(A=!0)}this.hasActiveBodies=A}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(Vs,ks),t){for(let t=0,e=Vs.length;t<e;t+=2)Hs.bodyA=this.getBodyById(Vs[t]),Hs.bodyB=this.getBodyById(Vs[t+1]),this.dispatchEvent(Hs);Hs.bodyA=Hs.bodyB=null}if(e){for(let t=0,e=ks.length;t<e;t+=2)Ws.bodyA=this.getBodyById(ks[t]),Ws.bodyB=this.getBodyById(ks[t+1]),this.dispatchEvent(Ws);Ws.bodyA=Ws.bodyB=null}Vs.length=ks.length=0;const i=this.hasAnyEventListener("beginShapeContact"),s=this.hasAnyEventListener("endShapeContact");if((i||s)&&this.shapeOverlapKeeper.getDiff(Vs,ks),i){for(let t=0,e=Vs.length;t<e;t+=2){const e=this.getShapeById(Vs[t]),i=this.getShapeById(Vs[t+1]);Gs.shapeA=e,Gs.shapeB=i,e&&(Gs.bodyA=e.body),i&&(Gs.bodyB=i.body),this.dispatchEvent(Gs)}Gs.bodyA=Gs.bodyB=Gs.shapeA=Gs.shapeB=null}if(s){for(let t=0,e=ks.length;t<e;t+=2){const e=this.getShapeById(ks[t]),i=this.getShapeById(ks[t+1]);Ds.shapeA=e,Ds.shapeB=i,e&&(Ds.bodyA=e.body),i&&(Ds.bodyB=i.body),this.dispatchEvent(Ds)}Ds.bodyA=Ds.bodyB=Ds.shapeA=Ds.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let i=0;i!==e;i++){const e=t[i];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new h;const Ts=new ut,Rs=globalThis.performance||{};if(!Rs.now){let t=Date.now();Rs.timing&&Rs.timing.navigationStart&&(t=Rs.timing.navigationStart),Rs.now=()=>Date.now()-t}new o;const Ns={type:"postStep"},Ps={type:"preStep"},Is={type:I.COLLIDE_EVENT_NAME,body:null,contact:null},qs=[],Ls=[],js=[],Os=[],Vs=[],ks=[],Hs={type:"beginContact",bodyA:null,bodyB:null},Ws={type:"endContact",bodyA:null,bodyB:null},Gs={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Ds={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}},8153:(t,e,i)=>{i.d(e,{J7:()=>m});var s=i(3687),n=i(9477),o=function(){var t,e,i,s,o=new n.Vector3;function r(){this.tolerance=-1,this.faces=[],this.newFaces=[],this.assigned=new c,this.unassigned=new c,this.vertices=[]}function a(){this.normal=new n.Vector3,this.midpoint=new n.Vector3,this.area=0,this.constant=0,this.outside=null,this.mark=0,this.edge=null}function l(t,e){this.vertex=t,this.prev=null,this.next=null,this.twin=null,this.face=e}function h(t,e){this.point=t,this.index=e,this.prev=null,this.next=null,this.face=null}function c(){this.head=null,this.tail=null}return Object.assign(r.prototype,{toJSON:function(){const t=this.faces.map((t=>t.toArray())),e=Array.from(new Set(t.flat())).sort(),i=[];for(let t=0;t<e.length;t++)i.push(this.vertices[e[t]].point.x,this.vertices[e[t]].point.y,this.vertices[e[t]].point.z);const s=new Map;for(let t=0;t<e.length;t++)s.set(e[t],t);const n=[];for(let e=0;e<t.length;e++)n.push([s.get(t[e][0]),s.get(t[e][1]),s.get(t[e][2])]);return[i,n]},setFromPoints:function(t){!0!==Array.isArray(t)&&console.error("THREE.ConvexHull: Points parameter is not an array."),t.length<4&&console.error("THREE.ConvexHull: The algorithm needs at least four points."),this.makeEmpty();for(var e=0,i=t.length;e<i;e++)this.vertices.push(new h(t[e],e));return this.compute(),this},setFromObject:function(t){var e=[];return t.updateMatrixWorld(!0),t.traverse((function(t){var i,s,o,r=t.geometry;if(void 0!==r&&(r.isGeometry&&(r=r.toBufferGeometry?r.toBufferGeometry():(new BufferGeometry).fromGeometry(r)),r.isBufferGeometry)){var a=r.attributes.position;if(void 0!==a)for(i=0,s=a.count;i<s;i++)(o=new n.Vector3).fromBufferAttribute(a,i).applyMatrix4(t.matrixWorld),e.push(o)}})),this.setFromPoints(e)},containsPoint:function(t){for(var e=this.faces,i=0,s=e.length;i<s;i++){if(e[i].distanceToPoint(t)>this.tolerance)return!1}return!0},intersectRay:function(t,e){for(var i=this.faces,s=-1/0,n=1/0,o=0,r=i.length;o<r;o++){var a=i[o],l=a.distanceToPoint(t.origin),h=a.normal.dot(t.direction);if(l>0&&h>=0)return null;var c=0!==h?-l/h:0;if(!(c<=0)&&(h>0?n=Math.min(c,n):s=Math.max(c,s),s>n))return null}return s!==-1/0?t.at(s,e):t.at(n,e),e},intersectsRay:function(t){return null!==this.intersectRay(t,o)},makeEmpty:function(){return this.faces=[],this.vertices=[],this},addVertexToFace:function(t,e){return t.face=e,null===e.outside?this.assigned.append(t):this.assigned.insertBefore(e.outside,t),e.outside=t,this},removeVertexFromFace:function(t,e){return t===e.outside&&(null!==t.next&&t.next.face===e?e.outside=t.next:e.outside=null),this.assigned.remove(t),this},removeAllVerticesFromFace:function(t){if(null!==t.outside){for(var e=t.outside,i=t.outside;null!==i.next&&i.next.face===t;)i=i.next;return this.assigned.removeSubList(e,i),e.prev=i.next=null,t.outside=null,e}},deleteFaceVertices:function(t,e){var i=this.removeAllVerticesFromFace(t);if(void 0!==i)if(void 0===e)this.unassigned.appendChain(i);else{var s=i;do{var n=s.next;e.distanceToPoint(s.point)>this.tolerance?this.addVertexToFace(s,e):this.unassigned.append(s),s=n}while(null!==s)}return this},resolveUnassignedPoints:function(t){if(!1===this.unassigned.isEmpty()){var e=this.unassigned.first();do{for(var i=e.next,s=this.tolerance,n=null,o=0;o<t.length;o++){var r=t[o];if(0===r.mark){var a=r.distanceToPoint(e.point);if(a>s&&(s=a,n=r),s>1e3*this.tolerance)break}}null!==n&&this.addVertexToFace(e,n),e=i}while(null!==e)}return this},computeExtremes:function(){var t,e,i,s=new n.Vector3,o=new n.Vector3,r=[],a=[];for(t=0;t<3;t++)r[t]=a[t]=this.vertices[0];for(s.copy(this.vertices[0].point),o.copy(this.vertices[0].point),t=0,e=this.vertices.length;t<e;t++){var l=this.vertices[t],h=l.point;for(i=0;i<3;i++)h.getComponent(i)<s.getComponent(i)&&(s.setComponent(i,h.getComponent(i)),r[i]=l);for(i=0;i<3;i++)h.getComponent(i)>o.getComponent(i)&&(o.setComponent(i,h.getComponent(i)),a[i]=l)}return this.tolerance=3*Number.EPSILON*(Math.max(Math.abs(s.x),Math.abs(o.x))+Math.max(Math.abs(s.y),Math.abs(o.y))+Math.max(Math.abs(s.z),Math.abs(o.z))),{min:r,max:a}},computeInitialHull:function(){void 0===t&&(t=new n.Line3,e=new n.Plane,i=new n.Vector3);var s,o,r,l,h,c,u,d,p,y=this.vertices,f=this.computeExtremes(),v=f.min,m=f.max,w=0,g=0;for(c=0;c<3;c++)(p=m[c].point.getComponent(c)-v[c].point.getComponent(c))>w&&(w=p,g=c);for(o=v[g],r=m[g],w=0,t.set(o.point,r.point),c=0,u=this.vertices.length;c<u;c++)(s=y[c])!==o&&s!==r&&(t.closestPointToPoint(s.point,!0,i),(p=i.distanceToSquared(s.point))>w&&(w=p,l=s));for(w=-1,e.setFromCoplanarPoints(o.point,r.point,l.point),c=0,u=this.vertices.length;c<u;c++)(s=y[c])!==o&&s!==r&&s!==l&&(p=Math.abs(e.distanceToPoint(s.point)))>w&&(w=p,h=s);var x=[];if(e.distanceToPoint(h.point)<0)for(x.push(a.create(o,r,l),a.create(h,r,o),a.create(h,l,r),a.create(h,o,l)),c=0;c<3;c++)d=(c+1)%3,x[c+1].getEdge(2).setTwin(x[0].getEdge(d)),x[c+1].getEdge(1).setTwin(x[d+1].getEdge(0));else for(x.push(a.create(o,l,r),a.create(h,o,r),a.create(h,r,l),a.create(h,l,o)),c=0;c<3;c++)d=(c+1)%3,x[c+1].getEdge(2).setTwin(x[0].getEdge((3-c)%3)),x[c+1].getEdge(0).setTwin(x[d+1].getEdge(1));for(c=0;c<4;c++)this.faces.push(x[c]);for(c=0,u=y.length;c<u;c++)if((s=y[c])!==o&&s!==r&&s!==l&&s!==h){w=this.tolerance;var b=null;for(d=0;d<4;d++)(p=this.faces[d].distanceToPoint(s.point))>w&&(w=p,b=this.faces[d]);null!==b&&this.addVertexToFace(s,b)}return this},reindexFaces:function(){for(var t=[],e=0;e<this.faces.length;e++){var i=this.faces[e];0===i.mark&&t.push(i)}return this.faces=t,this},nextVertexToAdd:function(){if(!1===this.assigned.isEmpty()){var t,e=0,i=this.assigned.first().face,s=i.outside;do{var n=i.distanceToPoint(s.point);n>e&&(e=n,t=s),s=s.next}while(null!==s&&s.face===i);return t}},computeHorizon:function(t,e,i,s){var n;this.deleteFaceVertices(i),i.mark=1,n=null===e?e=i.getEdge(0):e.next;do{var o=n.twin,r=o.face;0===r.mark&&(r.distanceToPoint(t)>this.tolerance?this.computeHorizon(t,o,r,s):s.push(n)),n=n.next}while(n!==e);return this},addAdjoiningFace:function(t,e){var i=a.create(t,e.tail(),e.head());return this.faces.push(i),i.getEdge(-1).setTwin(e.twin),i.getEdge(0)},addNewFaces:function(t,e){this.newFaces=[];for(var i=null,s=null,n=0;n<e.length;n++){var o=e[n],r=this.addAdjoiningFace(t,o);null===i?i=r:r.next.setTwin(s),this.newFaces.push(r.face),s=r}return i.next.setTwin(s),this},addVertexToHull:function(t){var e=[];return this.unassigned.clear(),this.removeVertexFromFace(t,t.face),this.computeHorizon(t.point,null,t.face,e),this.addNewFaces(t,e),this.resolveUnassignedPoints(this.newFaces),this},cleanup:function(){return this.assigned.clear(),this.unassigned.clear(),this.newFaces=[],this},compute:function(){var t;for(this.computeInitialHull();void 0!==(t=this.nextVertexToAdd());)this.addVertexToHull(t);return this.reindexFaces(),this.cleanup(),this}}),Object.assign(a,{create:function(t,e,i){var s=new a,n=new l(t,s),o=new l(e,s),r=new l(i,s);return n.next=r.prev=o,o.next=n.prev=r,r.next=o.prev=n,s.edge=n,s.compute()}}),Object.assign(a.prototype,{toArray:function(){const t=[];let e=this.edge;do{t.push(e.head().index),e=e.next}while(e!==this.edge);return t},getEdge:function(t){for(var e=this.edge;t>0;)e=e.next,t--;for(;t<0;)e=e.prev,t++;return e},compute:function(){void 0===s&&(s=new n.Triangle);var t=this.edge.tail(),e=this.edge.head(),i=this.edge.next.head();return s.set(t.point,e.point,i.point),s.getNormal(this.normal),s.getMidpoint(this.midpoint),this.area=s.getArea(),this.constant=this.normal.dot(this.midpoint),this},distanceToPoint:function(t){return this.normal.dot(t)-this.constant}}),Object.assign(l.prototype,{head:function(){return this.vertex},tail:function(){return this.prev?this.prev.vertex:null},length:function(){var t=this.head(),e=this.tail();return null!==e?e.point.distanceTo(t.point):-1},lengthSquared:function(){var t=this.head(),e=this.tail();return null!==e?e.point.distanceToSquared(t.point):-1},setTwin:function(t){return this.twin=t,t.twin=this,this}}),Object.assign(c.prototype,{first:function(){return this.head},last:function(){return this.tail},clear:function(){return this.head=this.tail=null,this},insertBefore:function(t,e){return e.prev=t.prev,e.next=t,null===e.prev?this.head=e:e.prev.next=e,t.prev=e,this},insertAfter:function(t,e){return e.prev=t,e.next=t.next,null===e.next?this.tail=e:e.next.prev=e,t.next=e,this},append:function(t){return null===this.head?this.head=t:this.tail.next=t,t.prev=this.tail,t.next=null,this.tail=t,this},appendChain:function(t){for(null===this.head?this.head=t:this.tail.next=t,t.prev=this.tail;null!==t.next;)t=t.next;return this.tail=t,this},remove:function(t){return null===t.prev?this.head=t.next:t.prev.next=t.next,null===t.next?this.tail=t.prev:t.next.prev=t.prev,this},removeSubList:function(t,e){return null===t.prev?this.head=e.next:t.prev.next=e.next,null===e.next?this.tail=t.prev:e.next.prev=t.prev,this},isEmpty:function(){return null===this.head}}),r}();const r=new n.Vector3,a=new n.Vector3,l=new n.Quaternion;function h(t){const e=function(t){const e=[];return t.traverse((function(t){t.isMesh&&e.push(t)})),e}(t);if(0===e.length)return null;if(1===e.length)return c(e[0]);let i;const s=[];for(;i=e.pop();)s.push(p(c(i)));return function(t){let e=0;for(let i=0;i<t.length;i++){const s=t[i].attributes.position;s&&3===s.itemSize&&(e+=s.count)}const i=new Float32Array(3*e);let s=0;for(let e=0;e<t.length;e++){const n=t[e].attributes.position;if(n&&3===n.itemSize)for(let t=0;t<n.count;t++)i[s++]=n.getX(t),i[s++]=n.getY(t),i[s++]=n.getZ(t)}return(new n.BufferGeometry).setAttribute("position",new n.BufferAttribute(i,3))}(s)}function c(t){const e=t.geometry.clone();return t.updateMatrixWorld(),t.matrixWorld.decompose(r,l,a),e.scale(a.x,a.y,a.z),e}function u(t){const e=t.attributes.position,i=new Float32Array(3*e.count);for(let t=0;t<e.count;t++)i[3*t]=e.getX(t),i[3*t+1]=e.getY(t),i[3*t+2]=e.getZ(t);return i}function d(t,e){switch(e){case"x":return t.x;case"y":return t.y;case"z":return t.z}throw new Error(`Unexpected component ${e}`)}function p(t,e=1e-4){e=Math.max(e,Number.EPSILON);const i={},s=t.getIndex(),o=t.getAttribute("position"),r=s?s.count:o.count;let a=0;const l=[],h=[],c=Math.log10(1/e),u=Math.pow(10,c);for(let t=0;t<r;t++){const e=s?s.getX(t):t;let n="";n+=~~(o.getX(e)*u)+",",n+=~~(o.getY(e)*u)+",",n+=~~(o.getZ(e)*u)+",",n in i?l.push(i[n]):(h.push(o.getX(e)),h.push(o.getY(e)),h.push(o.getZ(e)),i[n]=a,l.push(a),a++)}const d=new n.BufferAttribute(new Float32Array(h),o.itemSize,o.normalized),p=new n.BufferGeometry;return p.setAttribute("position",d),p.setIndex(l),p}const y=Math.PI/2;var f;!function(t){t.BOX="Box",t.CYLINDER="Cylinder",t.SPHERE="Sphere",t.HULL="ConvexPolyhedron",t.MESH="Trimesh"}(f||(f={}));const v=function(t,e={}){let i;if(e.type===f.BOX)return g(t);if(e.type===f.CYLINDER)return function(t,e){const i=["x","y","z"],o=e.cylinderAxis||"y",r=i.splice(i.indexOf(o),1)&&i,a=(new n.Box3).setFromObject(t);if(!isFinite(a.min.lengthSq()))return null;const l=a.max[o]-a.min[o],h=.5*Math.max(d(a.max,r[0])-d(a.min,r[0]),d(a.max,r[1])-d(a.min,r[1])),c="y"===o?y:0,u="z"===o?y:0;return{type:f.CYLINDER,params:{radiusTop:h,radiusBottom:h,height:l,segments:12},orientation:(new s._f).setFromEuler(c,u,0,"XYZ").normalize()}}(t,e);if(e.type===f.SPHERE)return function(t,e){if(e.sphereRadius)return{type:f.SPHERE,params:{radius:e.sphereRadius}};const i=h(t);return i?(i.computeBoundingSphere(),{type:f.SPHERE,params:{radius:i.boundingSphere.radius}}):null}(t,e);if(e.type===f.HULL)return function(t){const e=h(t);if(!e)return null;const i=1e-4;for(let t=0;t<e.attributes.position.count;t++)e.attributes.position.setXYZ(t,e.attributes.position.getX(t)+(Math.random()-.5)*i,e.attributes.position.getY(t)+(Math.random()-.5)*i,e.attributes.position.getZ(t)+(Math.random()-.5)*i);const[s,r]=(new o).setFromObject(new n.Mesh(e)).toJSON();return{type:f.HULL,params:{vertices:new Float32Array(s),faces:r}}}(t);if(e.type===f.MESH)return i=h(t),i?function(t){const e=u(t);if(!e.length)return null;const i=new Uint32Array(e.length);for(let t=0;t<e.length;t++)i[t]=t;return{type:f.MESH,params:{vertices:e,indices:i}}}(i):null;if(e.type)throw new Error(`[CANNON.getShapeParameters] Invalid type "${e.type}".`);if(i=h(t),!i)return null;switch(i.type){case"BoxGeometry":case"BoxBufferGeometry":return w(i);case"CylinderGeometry":case"CylinderBufferGeometry":return function(t){const e=t.parameters;return{type:f.CYLINDER,params:{radiusTop:e.radiusTop,radiusBottom:e.radiusBottom,height:e.height,segments:e.radialSegments},orientation:(new s._f).setFromEuler(n.MathUtils.degToRad(-90),0,0,"XYZ").normalize()}}(i);case"PlaneGeometry":case"PlaneBufferGeometry":return function(t){t.computeBoundingBox();const e=t.boundingBox;return{type:f.BOX,params:{x:(e.max.x-e.min.x)/2||.1,y:(e.max.y-e.min.y)/2||.1,z:(e.max.z-e.min.z)/2||.1}}}(i);case"SphereGeometry":case"SphereBufferGeometry":return function(t){return{type:f.SPHERE,params:{radius:t.parameters.radius}}}(i);case"TubeGeometry":case"BufferGeometry":return g(t);default:return console.warn('Unrecognized geometry: "%s". Using bounding box as shape.',i.type),w(i)}},m=function(t,e={}){const i=v(t,e);if(!i)return null;const{type:n,params:o,offset:r,orientation:a}=i;let l;return l=n===f.BOX?function(t){const{x:e,y:i,z:n}=t,o=new s.xu(new s.AO(e,i,n));return o}(o):n===f.CYLINDER?function(t){const{radiusTop:e,radiusBottom:i,height:n,segments:o}=t,r=new s.Ab(e,i,n,o);return r.radiusTop=i,r.radiusBottom=i,r.height=n,r.numSegments=o,r}(o):n===f.SPHERE?function(t){const e=new s.aL(t.radius);return e}(o):n===f.HULL?function(t){const{faces:e,vertices:i}=t,n=[];for(let t=0;t<i.length;t+=3)n.push(new s.AO(i[t],i[t+1],i[t+2]));const o=new s.YD({faces:e,vertices:n});return o}(o):function(t){const{vertices:e,indices:i}=t,n=new s.np(e,i);return n}(o),{shape:l,offset:r,orientation:a}};function w(t){if(!u(t).length)return null;t.computeBoundingBox();const e=t.boundingBox;return{type:f.BOX,params:{x:(e.max.x-e.min.x)/2,y:(e.max.y-e.min.y)/2,z:(e.max.z-e.min.z)/2}}}function g(t){const e=t.clone();e.quaternion.set(0,0,0,1),e.updateMatrixWorld();const i=(new n.Box3).setFromObject(e);if(!isFinite(i.min.lengthSq()))return null;const o=i.translate(e.position.negate()).getCenter(new n.Vector3);return{type:f.BOX,params:{x:(i.max.x-i.min.x)/2,y:(i.max.y-i.min.y)/2,z:(i.max.z-i.min.z)/2},offset:o.lengthSq()?new s.AO(o.x,o.y,o.z):void 0}}}}]);